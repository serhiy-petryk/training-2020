<!-- Original themes/aero.normalcolor.baml
    <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes"
                    xmlns:ui="clr-namespace:System.Windows.Documents;assembly=PresentationUI">
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:ui="clr-namespace:ControlInvestigate.Themes">

    <Style x:Key="Ñ">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeThickness="1"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2"
                               SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="Ò" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#F3F3F3" Offset="0"/>
            <GradientStop Color="#EBEBEB" Offset="0.5"/>
            <GradientStop Color="#DDDDDD" Offset="0.5"/>
            <GradientStop Color="#CDCDCD" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Ó" Color="#FF707070"/>
    <Style x:Key="Ô" TargetType="{x:Type ButtonBase}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource Ñ}"/>
        <Setter Property="Control.Background" Value="{StaticResource Ò}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource Ó}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <themes:ButtonChrome Name="Chrome" Background="{TemplateBinding Control.Background}"
                              BorderBrush="{TemplateBinding Control.BorderBrush}"
                              RenderDefaulted="{TemplateBinding Button.IsDefaulted}"
                              RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                              RenderPressed="{TemplateBinding ButtonBase.IsPressed}" SnapsToDevicePixels="true">
                        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </themes:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Chrome" Property="themes:ButtonChrome.RenderDefaulted" Value="true"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Chrome" Property="themes:ButtonChrome.RenderPressed" Value="true"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource Ô}" TargetType="{x:Type ToggleButton}"/>
    <Style BasedOn="{StaticResource Ô}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    </Style>
    <Style BasedOn="{StaticResource Ô}" TargetType="{x:Type Button}"/>
    <Style TargetType="{x:Type Calendar}">
        <Setter Property="Control.Foreground" Value="#FF333333"/>
        <Setter Property="Control.Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="#FFE4EAF0" Offset="0"/>
                    <GradientStop Color="#FFECF0F4" Offset="0.16"/>
                    <GradientStop Color="#FFFCFCFD" Offset="0.16"/>
                    <GradientStop Color="#FFFFFFFF" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem Name="PART_CalendarItem" Style="{TemplateBinding Calendar.CalendarItemStyle}"
                          Background="{TemplateBinding Control.Background}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}"
                          BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CalendarItem}">
        <Setter Property="FrameworkElement.Margin" Value="0,3,0,3"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <FrameworkTemplate.Resources>
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock FontWeight="Bold" FontFamily="Verdana" FontSize="9.5" Foreground="#FF333333"
                         HorizontalAlignment="Center" Margin="0,6,0,6" VerticalAlignment="Center" Text="{Binding}"/>
                        </DataTemplate>
                    </FrameworkTemplate.Resources>
                    <Grid Name="PART_Root">
                        <FrameworkElement.Resources>
                            <SolidColorBrush x:Key="Õ" Color="#A5FFFFFF"/>
                        </FrameworkElement.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal"/>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_DisabledVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" CornerRadius="1">
                            <Border CornerRadius="1" BorderBrush="#FFFFFFFF" BorderThickness="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <FrameworkElement.Resources>
                                        <ControlTemplate x:Key="Ö" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup Name="CommonStates">
                                                        <VisualState Name="Normal"/>
                                                        <VisualState Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"
                                                To="#FF73A9D8" Duration="0"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Opacity)"
                                                 To=".5" Duration="0"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Rectangle Fill="#11E5EBF1" Stretch="Fill" Opacity="1"/>
                                                <Grid>
                                                    <Path x:Name="path" Margin="14,-6,0,0" Height="10" Width="6" VerticalAlignment="Center"
                                                          HorizontalAlignment="Left" Stretch="Fill" Data="M 288.75,232.25 L 288.75,240.625 283,236.625 Z">
                                                        <Shape.Fill>
                                                            <SolidColorBrush Color="#FF333333"/>
                                                        </Shape.Fill>
                                                    </Path>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                        <ControlTemplate x:Key="×" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup Name="CommonStates">
                                                        <VisualState Name="Normal"/>
                                                        <VisualState Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"
                                                                                To="#FF73A9D8" Duration="0"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Opacity)"
                                                 To=".5" Duration="0"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Rectangle Fill="#11E5EBF1" Stretch="Fill" Opacity="1"/>
                                                <Grid>
                                                    <Path x:Name="path" Margin="0,-6,14,0" Height="10" Width="6" VerticalAlignment="Center"
                                HorizontalAlignment="Right" Stretch="Fill" Data="M 282.875,231.875 L 282.875,240.375 288.625,236 Z">
                                                        <Shape.Fill>
                                                            <SolidColorBrush Color="#FF333333"/>
                                                        </Shape.Fill>
                                                    </Path>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                        <ControlTemplate x:Key="Ø" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup Name="CommonStates">
                                                        <VisualState Name="Normal"/>
                                                        <VisualState Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Storyboard.TargetName="buttonContent"
                                                Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FF73A9D8"
                                                Duration="0"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="Opacity" To=".5" Duration="0"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <ContentPresenter x:Name="buttonContent" Content="{TemplateBinding ContentControl.Content}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Margin="1,4,1,9"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                                                    <TextElement.Foreground>
                                                        <SolidColorBrush Color="#FF333333"/>
                                                    </TextElement.Foreground>
                                                </ContentPresenter>
                                            </Grid>
                                        </ControlTemplate>
                                    </FrameworkElement.Resources>
                                    <Button x:Name="PART_PreviousButton" Grid.Row="0" Grid.Column="0" Template="{StaticResource Ö}" Height="20"
                          Width="28" HorizontalAlignment="Left" Focusable="false"/>
                                    <Button x:Name="PART_HeaderButton" Grid.Row="0" Grid.Column="1" Template="{StaticResource Ø}"
                          HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="10.5"
                          Focusable="false"/>
                                    <Button x:Name="PART_NextButton" Grid.Row="0" Grid.Column="2" Height="20" Width="28"
                          HorizontalAlignment="Right" Template="{StaticResource ×}" Focusable="false"/>
                                    <Grid x:Name="PART_MonthView" Row="1" ColumnSpan="3" Visibility="Visible" Margin="6,-1,6,6"
                        HorizontalAlignment="Center">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                    </Grid>
                                    <Grid x:Name="PART_YearView" Row="1" ColumnSpan="3" Visibility="Hidden" Margin="6,-3,7,6"
                        HorizontalAlignment="Center">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual" Opacity="0" Visibility="Collapsed" Stretch="Fill" StrokeThickness="1"
                       RadiusX="2" RadiusY="2" Stroke="{StaticResource Õ}" Fill="{StaticResource Õ}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="PART_DisabledVisual" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Value="Year"
                         Binding="{Binding Path=DisplayMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Calendar}}}">
                            <Setter TargetName="PART_MonthView" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="PART_YearView" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Value="Decade"
                         Binding="{Binding Path=DisplayMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Calendar}}}">
                            <Setter TargetName="PART_MonthView" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="PART_YearView" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CalendarDayButton}">
        <Setter Property="FrameworkElement.MinWidth" Value="5"/>
        <Setter Property="FrameworkElement.MinHeight" Value="5"/>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal"/>
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.5"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.5"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="NormalText" Storyboard.TargetProperty="Opacity" To=".35" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unselected"/>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <ObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </ObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <ObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </ObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Active"/>
                                <VisualState Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FF777777"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="RegularDay"/>
                                <VisualState Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FFFFFFFF"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="NormalDay"/>
                                <VisualState Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Blackout" Storyboard.TargetProperty="Opacity" To=".2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="TodayBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FFAAAAAA"/>
                        <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FFBADDE9"/>
                        <Border Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"/>
                        <Rectangle x:Name="HighlightBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FFBADDE9"/>
                        <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="5,1,5,1">
                            <TextElement.Foreground>
                                <SolidColorBrush Color="#FF333333"/>
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <Path x:Name="Blackout" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  RenderTransformOrigin="0.5,0.5" Fill="#FF000000" Stretch="Fill"
                  Data="M 8.1772461,11.029181 L 10.433105,11.029181 11.700684,12.801641 12.973633,11.029181 15.191895,11.029181 12.844727,13.999395 15.21875,17.060919 12.962891,17.060919 11.673828,15.256231 10.352539,17.060919 8.1396484,17.060919 10.519043,14.042364 Z"/>
                        <Rectangle x:Name="DayButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1"
                       RadiusY="1" Stroke="#FF45D6FA"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CalendarButton}">
        <Setter Property="Control.Background" Value="#FFBADDE9"/>
        <Setter Property="FrameworkElement.MinWidth" Value="40"/>
        <Setter Property="FrameworkElement.MinHeight" Value="42"/>
        <Setter Property="Control.FontSize" Value="10"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal"/>
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unselected"/>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75"
                                     Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Active"/>
                                <VisualState Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FF777777"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility"
                                                   Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <ObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </ObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility"
                                                   Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <ObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </ObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0"
                       Fill="{TemplateBinding Control.Background}"/>
                        <Rectangle x:Name="Background" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Control.Background}"/>
                        <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="1,0,1,1">
                            <TextElement.Foreground>
                                <SolidColorBrush Color="#FF333333"/>
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <Rectangle x:Name="CalendarButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1"
                       RadiusY="1" Stroke="#FF45D6FA"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="CalendarButtonFocusVisual" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ù">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" StrokeThickness="1"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2"
                     SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ú">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="1" StrokeThickness="1"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2"
                     SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Û" Color="#F4F4F4"/>
    <SolidColorBrush x:Key="Ü" Color="#8E8F8F"/>
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{StaticResource Û}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource Ü}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource Ú}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <themes:BulletChrome Background="{TemplateBinding Control.Background}"
                                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                                  RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                  RenderPressed="{TemplateBinding ButtonBase.IsPressed}"
                                  IsChecked="{TemplateBinding ToggleButton.IsChecked}"/>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ContentControl.HasContent" Value="true">
                            <Setter Value="{StaticResource Ù}" Property="FrameworkElement.FocusVisualStyle"/>
                            <Setter Property="Control.Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate DataType="{x:Type CollectionViewGroup}">
        <ContentPresenter ContentStringFormat="{TemplateBinding ContentPresenter.ContentStringFormat}"
                      Content="{Binding Path=Name}"/>
    </DataTemplate>
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Padding" Value="3,0,3,0"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Bd" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Control.Background" Value="#F5F5F5"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="Control.FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="Control.FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.BorderBrush" Value="#FF959595"/>
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="ContextMenu.HasDropShadow"
            Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent" SnapsToDevicePixels="true">
                        <Border Name="ContextMenuBorder" Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}">
                            <ScrollViewer Name="ContextMenuScrollViewer" Grid.ColumnSpan="2" Margin="1,0"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Rectangle Name="OpaqueRect" Height="{Binding ElementName=ContextMenuBorder, Path=ActualHeight}"
                                                   Width="{Binding ElementName=ContextMenuBorder, Path=ActualWidth}"
                                                   Fill="{Binding ElementName=ContextMenuBorder, Path=Background}"/>
                                    </Canvas>
                                    <Rectangle Fill="#F1F1F1" HorizontalAlignment="Left" Width="28" Margin="1,2" RadiusX="2" RadiusY="2"/>
                                    <Rectangle HorizontalAlignment="Left" Width="1" Margin="29,2,0,2" Fill="#E2E3E3"/>
                                    <Rectangle HorizontalAlignment="Left" Width="1" Margin="30,2,0,2" Fill="White"/>
                                    <ItemsPresenter Name="ItemsPresenter" Margin="{TemplateBinding Control.Padding}"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </themes:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ContextMenu.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>
                        <Trigger SourceName="ContextMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=ContextMenuScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect"
                      Value="{Binding ElementName=ContextMenuScrollViewer, Path=HorizontalOffset}" Property="Canvas.Left"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type FlowDocument}">
        <Setter Property="FlowDocument.TextAlignment" Value="Justify"/>
        <Setter Property="FlowDocument.FontFamily" Value="Georgia"/>
        <Setter Property="FlowDocument.FontSize" Value="16.0"/>
    </Style>
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.TextWrapping" Value="NoWrap"/>
        <Setter Property="TextBlock.TextTrimming" Value="None"/>
    </Style>
    <Style TargetType="{x:Type Bold}">
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
    </Style>
    <Style TargetType="{x:Type Italic}">
        <Setter Property="TextElement.FontStyle" Value="Italic"/>
    </Style>
    <Style TargetType="{x:Type Underline}">
        <Setter Property="Inline.TextDecorations" Value="Underline"/>
    </Style>
    <Style TargetType="{x:Type Paragraph}">
        <Setter Property="Block.Margin" Value="Auto"/>
    </Style>
    <Style TargetType="{x:Type List}">
        <Setter Property="Block.Margin" Value="Auto"/>
        <Setter Property="Block.Padding" Value="Auto"/>
    </Style>
    <Style TargetType="{x:Type Floater}">
        <Setter Property="Floater.HorizontalAlignment" Value="Right"/>
    </Style>
    <DataTemplate DataType="{x:Type FlowDocument}">
        <FlowDocumentReader Document="{Binding}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type FixedDocument}">
        <DocumentViewer Document="{Binding}"/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type FixedDocumentSequence}">
        <DocumentViewer Document="{Binding}"/>
    </DataTemplate>
    <LinearGradientBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=DocumentViewerToolBarGradient}"
                       StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="{x:Static SystemColors.InactiveCaptionTextColor}" Offset="0"/>
            <GradientStop Color="{x:Static SystemColors.InactiveCaptionColor}" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ä" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="{x:Static SystemColors.InactiveCaptionTextColor}" Offset="1"/>
            <GradientStop Color="{x:Static SystemColors.InactiveCaptionColor}" Offset="0"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type DocumentViewer}" BasedOn="{x:Null}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FrameworkElement.ContextMenu"
            Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ui:PresentationUIStyleResources}, ResourceId=PUIDocumentViewerContextMenu}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DocumentViewer}">
                    <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" Focusable="false">
                        <Grid Background="{TemplateBinding Control.Background}" KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ContentControl Grid.Row="0" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}" TabIndex="0"
                                            Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ui:PresentationUIStyleResources}, ResourceId=PUIDocumentViewerToolBarStyleKey}}"/>
                            <ScrollViewer x:Name="PART_ContentHost" Grid.Row="1" Grid.Column="0" CanContentScroll="true"
                                          HorizontalScrollBarVisibility="Auto" Focusable="{TemplateBinding UIElement.Focusable}"
                                          IsTabStop="true" TabIndex="1"/>
                            <DockPanel Grid.Row="1">
                                <FrameworkElement DockPanel.Dock="Right"
                                                  Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
                                <Rectangle Visibility="Visible" VerticalAlignment="top" Height="10">
                                    <Shape.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="#66000000" Offset="0"/>
                                                    <GradientStop Color="Transparent" Offset="1"/>
                                                </GradientStopCollection>
                                            </GradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Shape.Fill>
                                </Rectangle>
                            </DockPanel>
                            <ContentControl x:Name="PART_FindToolBarHost" Grid.Row="2" Grid.Column="0" TabIndex="2"
                                            Focusable="{TemplateBinding UIElement.Focusable}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <BooleanToVisibilityConverter x:Key="å"/>
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, ResourceId=DataGridSelectAllButtonStyle}"
         TargetType="{x:Type Button}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                       SnapsToDevicePixels="true"/>
                        <Polygon x:Name="Arrow" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="8,8,3,3"
                     Opacity="0.15" Fill="Black" Stretch="Uniform" Points="0,10 10,10 10,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="#FF688CAF"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="DataGrid.RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                  Padding="{TemplateBinding Control.Padding}">
                        <ScrollViewer Name="DG_ScrollViewer" Focusable="false">
                            <Control.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false"
                            Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=CellsPanelHorizontalOffset}"
                            Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, ResourceId=DataGridSelectAllButtonStyle}}"
                            Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}}"/>
                                        <DataGridColumnHeadersPresenter Name="PART_ColumnHeadersPresenter" Grid.Column="1"
                                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2"
                                            CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
                                        <ScrollBar Name="PART_VerticalScrollBar" Grid.Row="1" Grid.Column="2" Orientation="Vertical"
                               Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                               Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                               Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
                                        <Grid Row="2" Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar Name="PART_HorizontalScrollBar" Grid.Column="1" Orientation="Horizontal"
                                 Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                                 ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                 Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                 Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </Control.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <DataGridColumnHeader Name="PART_FillerColumnHeader" IsHitTestVisible="false"/>
                        <ItemsPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="æ" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Width" Value="8"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeWE"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ç" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.Height" Value="8"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static DataGridColumnHeader.ColumnFloatingHeaderStyleKey}" TargetType="{x:Type Control}">
        <Setter Property="UIElement.Opacity" Value="0.6"/>
        <Setter Property="Control.BorderBrush" Value="#FF688CAF"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}"
                  Background="{TemplateBinding Control.Background}">
                        <Grid>
                            <Canvas Name="PART_VisualBrushCanvas" Margin="{TemplateBinding FrameworkElement.Margin}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static DataGridColumnHeader.ColumnHeaderDropSeparatorStyleKey}"
         TargetType="{x:Type Separator}">
        <Setter Property="Control.Background" Value="#FF000080"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="DataGridRow.ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Margin="2,0,0,0" VerticalAlignment="Center" Foreground="Red" Text="!"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                        <SelectiveScrollingGrid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding DataGridRow.ItemsPanel}"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DataGridRow.DetailsVisibility}"
                                        SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=AreRowDetailsFrozen, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}}"/>
                            <DataGridRowHeader SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Grid.RowSpan="2"
                                 Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Row}}"/>
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DataGridRow.IsNewItem" Value="true">
                <Setter Property="FrameworkElement.Margin"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NewItemMargin}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DataGridCellsPresenter}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCellsPresenter}">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000"/>
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="true">
                <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <Setter Property="Control.Foreground"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="Control.BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                <Setter Property="Control.BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="DataGridCell.IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Background"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                <Setter Property="Control.BorderBrush"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                <Setter Property="Control.Foreground"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static DataGridComboBoxColumn.TextBlockComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ContentPresenter Margin="1,1,1,1" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                            ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" IsHitTestVisible="false"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <themes:DataGridHeaderBorder SortDirection="{TemplateBinding DataGridColumnHeader.SortDirection}"
                                        IsHovered="{TemplateBinding UIElement.IsMouseOver}"
                                        IsPressed="{TemplateBinding ButtonBase.IsPressed}"
                                        IsClickable="{TemplateBinding DataGridColumnHeader.CanUserSort}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Padding="{TemplateBinding Control.Padding}"
                                        SeparatorVisibility="{TemplateBinding DataGridColumnHeader.SeparatorVisibility}"
                                        SeparatorBrush="{TemplateBinding DataGridColumnHeader.SeparatorBrush}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                RecognizesAccessKey="true"/>
                        </themes:DataGridHeaderBorder>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource æ}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource æ}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <themes:DataGridHeaderBorder IsSelected="{TemplateBinding DataGridRowHeader.IsRowSelected}"
                                        IsHovered="{TemplateBinding UIElement.IsMouseOver}"
                                        IsPressed="{TemplateBinding ButtonBase.IsPressed}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Padding="{TemplateBinding Control.Padding}" Orientation="Horizontal"
                                        SeparatorVisibility="{TemplateBinding DataGridRowHeader.SeparatorVisibility}"
                                        SeparatorBrush="{TemplateBinding DataGridRowHeader.SeparatorBrush}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                  RecognizesAccessKey="true"/>
                                <Control SnapsToDevicePixels="false"
                         Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=(Validation.HasError), Converter={StaticResource å}}"
                         Template="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=ValidationErrorTemplate}"/>
                            </StackPanel>
                        </themes:DataGridHeaderBorder>
                        <Thumb x:Name="PART_TopHeaderGripper" VerticalAlignment="Top" Style="{StaticResource ç}"/>
                        <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom" Style="{StaticResource ç}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="Control.Foreground" Value="#FF333333"/>
        <Setter Property="DatePicker.IsTodayHighlighted" Value="true"/>
        <Setter Property="DatePicker.SelectedDateFormat" Value="Short"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="Control.BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint=".5,0" StartPoint=".5,1">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal"/>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_DisabledVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Decorator.Child>
                            <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                                <FrameworkElement.Resources>
                                    <SolidColorBrush x:Key="è" Color="#A5FFFFFF"/>
                                    <ControlTemplate x:Key="é" TargetType="{x:Type Button}">
                                        <Grid>
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup Name="CommonStates">
                                                    <VisualStateGroup.Transitions>
                                                        <VisualTransition GeneratedDuration="0"/>
                                                        <VisualTransition To="MouseOver" GeneratedDuration="0:0:0.1"/>
                                                        <VisualTransition To="Pressed" GeneratedDuration="0:0:0.1"/>
                                                    </VisualStateGroup.Transitions>
                                                    <VisualState Name="Normal"/>
                                                    <VisualState Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" Storyboard.TargetName="Background"
                                                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF448DCA"/>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#7FFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#CCFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#F2FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState Name="Pressed">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Background"
                                                                                          Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#FF448DCA"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Highlight"
                                                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#EAFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#C6FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#6BFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient"
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#F4FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState Name="Disabled"/>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Grid Height="18" Width="19" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0"
                                                  Background="#11FFFFFF" FlowDirection="LeftToRight">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="23*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                </Grid.RowDefinitions>
                                                <Border x:Name="Highlight" Margin="-1" Grid.ColumnSpan="4" Grid.Row="0" Grid.RowSpan="4"
                                                        BorderThickness="1" BorderBrush="#FF45D6FA" Opacity="0" CornerRadius="0,0,1,1"/>
                                                <Border x:Name="Background" Margin="0,-1,0,0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3"
                                                        BorderThickness="1" BorderBrush="#FFFFFFFF" Opacity="1" CornerRadius=".5" Background="#FF1F3B53"/>
                                                <Border x:Name="BackgroundGradient" Margin="0,-1,0,0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3"
                                                        BorderThickness="1" BorderBrush="#BF000000" Opacity="1" CornerRadius=".5">
                                                    <Border.Background>
                                                        <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                                            <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                                            <GradientStop Color="#F9FFFFFF" Offset="0.375"/>
                                                            <GradientStop Color="#E5FFFFFF" Offset="0.625"/>
                                                            <GradientStop Color="#C6FFFFFF" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1">
                                                    <Shape.Stroke>
                                                        <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                                                            <GradientStop Color="#FF494949"/>
                                                            <GradientStop Color="#FF9F9F9F" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Shape.Stroke>
                                                    <Shape.Fill>
                                                        <LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">
                                                            <GradientStop Color="#FF4084BD"/>
                                                            <GradientStop Color="#FFAFCFEA" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Shape.Fill>
                                                </Rectangle>
                                                <Path HorizontalAlignment="Center" Margin="4,3,4,3" VerticalAlignment="Center"
                                                      RenderTransformOrigin="0.5,0.5" Grid.Column="0" Grid.Row="1" Fill="#FF2F2F2F" Stretch="Fill"
                                                      Data="M 11.426758,8.4305077 L 11.749023,8.4305077 11.749023,16.331387 10.674805,16.331387 10.674805,10.299648 9.0742188,11.298672 9.0742188,10.294277 C 9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 M 14.65086,8.4305077 L 18.566387,8.4305077 18.566387,9.3435936 15.671368,9.3435936 15.671368,11.255703 C 15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L 14.881817,14.929531 C 15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L 14.65086,12.238613 Z"
                                                      Grid.ColumnSpan="4" Grid.RowSpan="3"/>
                                                <Ellipse HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#FFFFFFFF" StrokeThickness="0"
                                                         Grid.ColumnSpan="4" Width="3" Height="3"/>
                                                <Border x:Name="DisabledVisual" Grid.ColumnSpan="4" Grid.Row="0" Grid.RowSpan="4" BorderThickness="1"
                                                        BorderBrush="#B2FFFFFF" Opacity="0" CornerRadius="0,0,.5,.5"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </FrameworkElement.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_Button" Grid.Row="0" Grid.Column="1" Template="{StaticResource é}"
                                        Foreground="{TemplateBinding Control.Foreground}" Width="20" Margin="3,0,3,0" Focusable="false"
                                        VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                <DatePickerTextBox x:Name="PART_TextBox" Grid.Row="0" Grid.Column="0" HorizontalContentAlignment="Stretch"
                                                   VerticalContentAlignment="Stretch" Focusable="{TemplateBinding UIElement.Focusable}"/>
                                <Grid x:Name="PART_DisabledVisual" Opacity="0" IsHitTestVisible="false" Row="0" Column="0" ColumnSpan="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Row="0" Grid.Column="0" RadiusX="1" RadiusY="1" Fill="#A5FFFFFF"/>
                                    <Rectangle Grid.Row="0" Grid.Column="1" RadiusX="1" RadiusY="1" Fill="#A5FFFFFF" Height="18" Width="19"
                                               Margin="3,0,3,0"/>
                                    <Popup x:Name="PART_Popup" Placement="Bottom" StaysOpen="false" AllowsTransparency="true"
                                           PlacementTarget="{Binding ElementName=PART_TextBox}"/>
                                </Grid>
                            </Grid>
                        </Decorator.Child>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="false" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                            <Setter TargetName="PART_TextBox"
                                    Value="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                    Property="Control.Foreground"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <FrameworkElement.Resources>
                            <SolidColorBrush x:Key="ê" Color="#FFAAAAAA"/>
                        </FrameworkElement.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                    <VisualTransition To="MouseOver" GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal"/>
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="ContentElement"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#FF99C1E2"
                                                        Duration="0"/>
                                        <ColorAnimation Storyboard.TargetName="watermark_decorator"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#FF99C1E2"
                                                        Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unwatermarked"/>
                                <VisualState Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Opacity" To="0" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="PART_Watermark" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unfocused"/>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Padding="{TemplateBinding Control.Padding}" CornerRadius="1" Opacity="1">
                            <Grid x:Name="WatermarkContent"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderThickness="1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="#FFFFFFFF"/>
                                    </Border.BorderBrush>
                                </Border>
                                <Border x:Name="watermark_decorator" BorderThickness="1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="#FFFFFFFF"/>
                                    </Border.BorderBrush>
                                    <ContentControl x:Name="PART_Watermark" Opacity="0" Focusable="false" IsHitTestVisible="false" Padding="2"/>
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" Margin="0"
                                              HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                                <Border x:Name="FocusVisual" BorderBrush="#FF45D6FA" CornerRadius="1" Opacity="0" IsHitTestVisible="false"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ë" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0"/>
            <GradientStop Color="#FFBFBFBF" Offset="0.5"/>
            <GradientStop Color="#FF878787" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ì" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFF0F8FE" Offset="0"/>
            <GradientStop Color="#FFE0F3FE" Offset="0.3"/>
            <GradientStop Color="#FF6FA7C5" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="í" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFDCF0FA" Offset="0"/>
            <GradientStop Color="#FFC5E6F7" Offset="0.2"/>
            <GradientStop Color="#FF5690D0" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="î" Color="DarkGray"/>
    <SolidColorBrush x:Key="ï" Color="Transparent"/>
    <SolidColorBrush x:Key="ð" Color="#666"/>
    <SolidColorBrush x:Key="ñ" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="ò" Color="Transparent"/>
    <SolidColorBrush x:Key="ó" Color="#222"/>
    <SolidColorBrush x:Key="ô" Color="#FF526C7B"/>
    <SolidColorBrush x:Key="õ" Color="Transparent"/>
    <SolidColorBrush x:Key="ö" Color="#FF003366"/>
    <SolidColorBrush x:Key="÷" Color="DarkGray"/>
    <SolidColorBrush x:Key="ø" Color="Transparent"/>
    <SolidColorBrush x:Key="ù" Color="#666"/>
    <Style x:Key="ú">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" SnapsToDevicePixels="true"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="û" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Width="19" Height="19" Stroke="{StaticResource î}" Fill="{StaticResource ï}"
                       HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{StaticResource ð}"
                    StrokeThickness="2" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 8,1.5 "/>
                            <ContentPresenter Grid.Column="1" Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                SnapsToDevicePixels="true" RecognizesAccessKey="true"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 1,4.5 L 4.5,1 8,4.5 "/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{StaticResource ñ}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ò}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ó}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ô}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter TargetName="circle" Property="Shape.StrokeThickness" Value="1.5"/>
                            <Setter Value="{StaticResource õ}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ö}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource ÷}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ø}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ù}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ü" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Ellipse x:Name="circle" Width="19" Height="19" Stroke="{StaticResource î}" Fill="{StaticResource ï}"
                         HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{StaticResource ð}"
                      StrokeThickness="2" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 8,1.5 "/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                SnapsToDevicePixels="true" RecognizesAccessKey="true"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 1,4.5 L 4.5,1 8,4.5 "/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{StaticResource ñ}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ò}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ó}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ô}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter TargetName="circle" Property="Shape.StrokeThickness" Value="1.5"/>
                            <Setter Value="{StaticResource õ}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ö}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource ÷}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ø}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ù}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ý" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Ellipse x:Name="circle" Width="19" Height="19" Stroke="{StaticResource î}" Fill="{StaticResource ï}"
                         HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{StaticResource ð}"
                      StrokeThickness="2" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 8,1.5 "/>
                            </Grid>
                            <ContentPresenter Grid.Row="1" Margin="0,4,0,0" HorizontalAlignment="Center" VerticalAlignment="Top"
                                SnapsToDevicePixels="true" RecognizesAccessKey="true"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 1,4.5 L 4.5,1 8,4.5 "/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{StaticResource ñ}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ò}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ó}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ô}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter TargetName="circle" Property="Shape.StrokeThickness" Value="1.5"/>
                            <Setter Value="{StaticResource õ}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ö}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource ÷}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ø}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ù}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="þ" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Control.Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Ellipse x:Name="circle" Width="19" Height="19" Stroke="{StaticResource î}" Fill="{StaticResource ï}"
                         HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{StaticResource ð}"
                      StrokeThickness="2" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 8,1.5 "/>
                            </Grid>
                            <ContentPresenter Grid.Row="1" Margin="0,4,0,0" HorizontalAlignment="Center" VerticalAlignment="Top"
                                SnapsToDevicePixels="true" RecognizesAccessKey="true"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Path.Data" Value="M 1,4.5 L 4.5,1 8,4.5 "/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{StaticResource ñ}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ò}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ó}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ô}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter TargetName="circle" Property="Shape.StrokeThickness" Value="1.5"/>
                            <Setter Value="{StaticResource õ}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ö}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource ÷}" TargetName="circle" Property="Shape.Stroke"/>
                            <Setter Value="{StaticResource ø}" TargetName="circle" Property="Shape.Fill"/>
                            <Setter Value="{StaticResource ù}" TargetName="arrow" Property="Shape.Stroke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" DockPanel.Dock="Top" Margin="1" MinWidth="0" MinHeight="0"
                            Style="{StaticResource û}" FocusVisualStyle="{StaticResource ú}"
                            Content="{TemplateBinding HeaderedContentControl.Header}"
                            ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                            Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                            FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                            FontStyle="{TemplateBinding Control.FontStyle}" FontStretch="{TemplateBinding Control.FontStretch}"
                            FontWeight="{TemplateBinding Control.FontWeight}"
                            HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Visibility="Collapsed" Focusable="false"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Expander.IsExpanded" Value="true">
                            <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter Value="{StaticResource þ}" TargetName="HeaderSite" Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter Value="{StaticResource ü}" TargetName="HeaderSite" Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter Value="{StaticResource ý}" TargetName="HeaderSite" Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeDashArray="1 2" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ć">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="#80000000"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="GridSplitter.PreviewStyle" Value="{StaticResource ć}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <BorderGapMaskConverter x:Key="Ĉ"/>
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Control.BorderBrush" Value="#D5DFE5"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border CornerRadius="4" Grid.Row="1" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="Transparent"
                    Background="{TemplateBinding Control.Background}"/>
                        <Border CornerRadius="4" Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="White">
                            <UIElement.OpacityMask>
                                <MultiBinding Converter="{StaticResource Ĉ}" ConverterParameter="7">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </UIElement.OpacityMask>
                            <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="3">
                                <Border BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="White" CornerRadius="2"/>
                            </Border>
                        </Border>
                        <Border x:Name="Header" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Control.Padding}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GroupItem}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <StackPanel>
                        <ContentPresenter x:Name="PART_Header"/>
                        <ItemsPresenter x:Name="ItemsPresenter" Margin="5,0,0,0"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <StackPanel>
                        <ContentPresenter ContentSource="Header"/>
                        <ContentPresenter/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="TextElement.Foreground"
            Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}"/>
        <Setter Property="Inline.TextDecorations" Value="Underline"/>
        <Style.Triggers>
            <Trigger Property="ContentElement.IsMouseOver" Value="true">
                <Setter Property="TextElement.Foreground" Value="Red"/>
            </Trigger>
            <Trigger Property="ContentElement.IsEnabled" Value="false">
                <Setter Property="TextElement.Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="ContentElement.IsEnabled" Value="true">
                <Setter Property="FrameworkContentElement.Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ItemsControl}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Label}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Padding" Value="5"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ĉ" Color="#828790"/>
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ĉ}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border Name="Bd" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true" Padding="1">
                        <ScrollViewer Padding="{TemplateBinding Control.Padding}" Focusable="false">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Padding" Value="2,0,0,0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="Bd" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ListBoxItem.IsSelected" Value="true">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                      Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"
                      Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Control.Padding}">
                            <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                            Focusable="false">
                                <GridViewHeaderRowPresenter Margin="2,0,2,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderStringFormat="{Binding Path=TemplatedParent.View.ColumnHeaderStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}">
                                    <GridViewRowPresenterBase.Columns>
                                        <Binding Path="TemplatedParent.View.Columns" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </GridViewRowPresenterBase.Columns>
                                </GridViewHeaderRowPresenter>
                            </ScrollViewer>
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local"
                                      Content="{TemplateBinding ContentControl.Content}"
                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </DockPanel>
                        <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Minimum="0.0"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Cursor="Arrow"
                       Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
                        <ScrollBar Name="PART_VerticalScrollBar" Orientation="Vertical" Grid.Column="1" Minimum="0.0"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Cursor="Arrow"
                       Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
                        <DockPanel Grid.Column="1" Grid.Row="1" LastChildFill="false"
                       Background="{Binding Path=Background, ElementName=PART_VerticalScrollBar}">
                            <Rectangle DockPanel.Dock="Left" Width="1" Fill="White"
                         Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"/>
                            <Rectangle DockPanel.Dock="Top" Height="1" Fill="White"
                         Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"/>
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="Ċ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFF2F2F2" Offset="0"/>
            <GradientStop Color="#FFD5D5D5" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ċ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0"/>
            <GradientStop Color="#FFFFFFFF" Offset="0.4091"/>
            <GradientStop Color="#FFF7F8F9" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Č" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFBDEDFF" Offset="0"/>
            <GradientStop Color="#FFB7E7FB" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="č" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FF8DD6F7" Offset="0"/>
            <GradientStop Color="#FF8AD1F5" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="Ď" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-9"/>
        <Setter Property="FrameworkElement.Width" Value="18"/>
        <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Control.Padding" Value="0"/>
        <Setter Property="Control.Background" Value="{StaticResource Ċ}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="Transparent">
                        <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Control.Background}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Background" Value="{StaticResource ċ}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource Ċ}"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Padding" Value="2,0,2,0"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid SnapsToDevicePixels="true">
                        <Border Name="HeaderBorder" BorderThickness="0,1,0,1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="7"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle Name="UpperHighlight" Visibility="Collapsed" Fill="#FFE3F7FF"/>
                                <Border Grid.RowSpan="2" Padding="{TemplateBinding Control.Padding}">
                                    <ContentPresenter Name="HeaderContent" Margin="0,0,0,1"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                </Border>
                            </Grid>
                        </Border>
                        <Border Name="HeaderHoverBorder" BorderThickness="1,0,1,1" Margin="1,1,0,0"/>
                        <Border Name="HeaderPressBorder" BorderThickness="1,1,1,0" Margin="1,0,0,1"/>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource Ď}"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="HeaderBorder" Value="{StaticResource Č}" Property="Border.Background"/>
                            <Setter TargetName="HeaderHoverBorder" Property="Border.BorderBrush" Value="#FF88CBEB"/>
                            <Setter TargetName="UpperHighlight" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="PART_HeaderGripper" Property="Control.Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="HeaderBorder" Value="{StaticResource č}" Property="Border.Background"/>
                            <Setter TargetName="HeaderHoverBorder" Property="Border.BorderBrush" Value="#FF95DAF9"/>
                            <Setter TargetName="HeaderPressBorder" Property="Border.BorderBrush" Value="#FF7A9EB1"/>
                            <Setter TargetName="UpperHighlight" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="UpperHighlight" Property="Shape.Fill" Value="#FFBCE4F9"/>
                            <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="HeaderContent" Property="FrameworkElement.Margin" Value="1,1,0,0"/>
                        </Trigger>
                        <Trigger Property="FrameworkElement.Height" Value="Auto">
                            <Setter Property="FrameworkElement.MinHeight" Value="20"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="GridViewColumnHeader.Role" Value="Floating">
                <Setter Property="UIElement.Opacity" Value="0.4082"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Canvas Name="PART_FloatingHeaderCanvas">
                                <Rectangle Opacity="0.4697" Fill="#FF000000" Width="{TemplateBinding FrameworkElement.ActualWidth}"
                           Height="{TemplateBinding FrameworkElement.ActualHeight}"/>
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="GridViewColumnHeader.Role" Value="Padding">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Border Name="HeaderBorder" BorderThickness="0,1,0,1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="FrameworkElement.Height" Value="Auto">
                                    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static GridView.GridViewStyleKey}" TargetType="{x:Type ListView}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ĉ}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Foreground" Value="#FF042271"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <themes:ListBoxChrome Name="Bd" BorderThickness="{TemplateBinding Control.BorderThickness}"
                               BorderBrush="{TemplateBinding Control.BorderBrush}"
                               Background="{TemplateBinding Control.Background}"
                               RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                               RenderFocused="{TemplateBinding UIElement.IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
                          Padding="{TemplateBinding Control.Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </themes:ListBoxChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="themes:ListBoxChrome.Background"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ď">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1" RadiusX="2" RadiusY="2" Stroke="#8E6EA6F5"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="Đ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFF1FBFF" Offset="0"/>
            <GradientStop Color="#FFD5F1FE" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="đ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFD9F4FF" Offset="0"/>
            <GradientStop Color="#FF9BDDFB" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ē" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFEAF9FF" Offset="0"/>
            <GradientStop Color="#FFC9EDFD" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ē" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFEEEDED" Offset="0"/>
            <GradientStop Color="#FFDDDDDD" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="{x:Static GridView.GridViewItemContainerStyleKey}" TargetType="{x:Type ListViewItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ď}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,1"/>
        <Setter Property="Control.Padding" Value="5,2,5,2"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}" CornerRadius="2" SnapsToDevicePixels="true">
                        <Border Name="InnerBorder" CornerRadius="1" BorderThickness="1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="11"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle Name="UpperHighlight" Visibility="Collapsed" Fill="#75FFFFFF"/>
                                <GridViewRowPresenter Grid.RowSpan="2" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{StaticResource Đ}" Property="Control.Background"/>
                            <Setter Property="Control.BorderBrush" Value="#FFCCF0FF"/>
                            <Setter TargetName="UpperHighlight" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ListBoxItem.IsSelected" Value="true">
                            <Setter Value="{StaticResource đ}" Property="Control.Background"/>
                            <Setter Property="Control.BorderBrush" Value="#FF98DDFB"/>
                            <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="#80FFFFFF"/>
                            <Setter TargetName="UpperHighlight" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="UpperHighlight" Property="Shape.Fill" Value="#40FFFFFF"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource ē}" Property="Control.Background"/>
                            <Setter Property="Control.BorderBrush" Value="#FFCFCFCF"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource Ē}" Property="Control.Background"/>
                            <Setter Property="Control.BorderBrush" Value="#FF98DDFB"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="Ĕ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#F6F6F6" Offset="0.25"/>
            <GradientStop Color="#EAE8E8" Offset="0.25"/>
            <GradientStop Color="#DCD9D9" Offset="0.8"/>
            <GradientStop Color="White" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Control.Background" Value="{StaticResource Ĕ}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="Control.FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="Control.FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <MenuScrollingVisibilityConverter x:Key="ĕ"/>
    <Geometry x:Key="Ë">
        M 0,0 L 3.5,4 L 7,0 Z
    </Geometry>
    <Geometry x:Key="Ė">
        M 0,4 L 3.5,0 L 7,4 Z
    </Geometry>
    <Geometry x:Key="ė">
        M 0,0 L 4,3.5 L 0,7 Z
    </Geometry>
    <Geometry x:Key="Ę">
        M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z
    </Geometry>
    <SolidColorBrush x:Key="ę" Color="#FFF5F5F5"/>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubmenuContent}"
                   TargetType="{x:Type ContentControl}">
        <Border Background="{StaticResource ę}" BorderBrush="#FF959595" BorderThickness="1">
            <Grid>
                <Rectangle Fill="#F1F1F1" HorizontalAlignment="Left" Width="28" Margin="2" RadiusX="2" RadiusY="2"/>
                <Rectangle HorizontalAlignment="Left" Width="1" Margin="30,2,0,2" Fill="#E2E3E3"/>
                <Rectangle HorizontalAlignment="Left" Width="1" Margin="31,2,0,2" Fill="White"/>
                <ContentPresenter Grid.ColumnSpan="2" Margin="1,0"/>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style x:Key="Ě" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="ButtonBase.ClickMode" Value="Hover"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle x:Name="R1" DockPanel.Dock="Right" Width="1" Fill="Transparent"/>
                        <Rectangle x:Name="B1" DockPanel.Dock="Bottom" Height="1" Fill="Transparent"/>
                        <Rectangle x:Name="L1" DockPanel.Dock="Left" Width="1" Fill="Transparent"/>
                        <Rectangle x:Name="T1" DockPanel.Dock="Top" Height="1" Fill="Transparent"/>
                        <ContentPresenter x:Name="ContentContainer" Margin="2,2,2,2" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="R1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                      Property="Shape.Fill"/>
                            <Setter TargetName="B1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                      Property="Shape.Fill"/>
                            <Setter TargetName="L1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                      Property="Shape.Fill"/>
                            <Setter TargetName="T1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                      Property="Shape.Fill"/>
                            <Setter TargetName="ContentContainer" Property="FrameworkElement.Margin" Value="3,3,1,1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}"
         TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Control.Padding}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
                        </Border>
                        <RepeatButton Style="{StaticResource Ě}" Grid.Row="0" Grid.Column="0"
                          Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                            <UIElement.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource ĕ}" ConverterParameter="0">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </UIElement.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource Ė}"/>
                        </RepeatButton>
                        <RepeatButton Style="{StaticResource Ě}" Grid.Row="2" Grid.Column="0"
                          Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                            <UIElement.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource ĕ}" ConverterParameter="100">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </UIElement.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="{StaticResource Ë}"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ě" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#34C5EBFF" Offset="0"/>
            <GradientStop Color="#3481D8FF" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ĝ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#28717070" Offset="0"/>
            <GradientStop Color="#50717070" Offset="0.75"/>
            <GradientStop Color="#90717070" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid SnapsToDevicePixels="true" UseLayoutRounding="false" Margin="0,6,0,4">
                        <Rectangle Height="1" Margin="30,0,1,1" Fill="#E0E0E0"/>
                        <Rectangle Height="1" Margin="30,1,1,0" Fill="White"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}"
                     TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="OuterBorder" RadiusX="2" RadiusY="2"/>
            <Rectangle Name="Bg" Margin="1" Fill="{TemplateBinding Control.Background}"
                       Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1"/>
            <Rectangle x:Name="InnerBorder" Margin="2"/>
            <DockPanel>
                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <Path x:Name="GlyphPanel" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"
                      Fill="{TemplateBinding Control.Foreground}" FlowDirection="LeftToRight" Data="{StaticResource Ę}"/>
                <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="#90717070"/>
                <Setter TargetName="OuterBorder" Property="Shape.Stroke" Value="#50FFFFFF"/>
                <Setter TargetName="InnerBorder" Property="Shape.Stroke" Value="#50FFFFFF"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="#E0717070"/>
                <Setter TargetName="Bg" Value="{StaticResource Ĝ}" Property="Shape.Fill"/>
                <Setter TargetName="InnerBorder" Property="Shape.Stroke" Value="#50747272"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="#FF9A9A9A"/>
                <Setter TargetName="GlyphPanel" Property="Shape.Fill" Value="#848589"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}"
                   TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="OuterBorder" RadiusX="2" RadiusY="2"/>
            <Rectangle Name="Bg" Margin="1" Fill="{TemplateBinding Control.Background}"
                 Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1"/>
            <Rectangle x:Name="InnerBorder" Margin="2"/>
            <DockPanel>
                <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <Path x:Name="GlyphPanel" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"
              Fill="{TemplateBinding Control.Foreground}" FlowDirection="LeftToRight" Data="{StaticResource Ę}"/>
                <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </DockPanel>
            <Popup x:Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
             Placement="Bottom" Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                    <Border Name="SubMenuBorder" Background="{StaticResource ę}" BorderBrush="#FF959595" BorderThickness="1">
                        <ScrollViewer Name="SubMenuScrollViewer" Margin="1,0"
                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle Name="OpaqueRect" Fill="{StaticResource ę}"
                             Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                             Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"/>
                                </Canvas>
                                <Rectangle Fill="#F1F1F1" HorizontalAlignment="Left" Width="28" Margin="1,2" RadiusX="2" RadiusY="2"/>
                                <Rectangle HorizontalAlignment="Left" Width="1" Margin="29,2,0,2" Fill="#E2E3E3"/>
                                <Rectangle HorizontalAlignment="Left" Width="1" Margin="30,2,0,2" Fill="White"/>
                                <ItemsPresenter Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Grid.IsSharedSizeScope="true"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </themes:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="#90717070"/>
                <Setter TargetName="OuterBorder" Property="Shape.Stroke" Value="#50FFFFFF"/>
                <Setter TargetName="InnerBorder" Property="Shape.Stroke" Value="#50FFFFFF"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="#E0717070"/>
                <Setter TargetName="Bg" Value="{StaticResource Ĝ}" Property="Shape.Fill"/>
                <Setter TargetName="InnerBorder" Property="Shape.Stroke" Value="#50747272"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="#E0717070"/>
                <Setter TargetName="Bg" Value="{StaticResource Ĝ}" Property="Shape.Fill"/>
                <Setter TargetName="InnerBorder" Property="Shape.Stroke" Value="#50747272"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="#FF9A9A9A"/>
                <Setter TargetName="GlyphPanel" Property="Shape.Fill" Value="#848589"/>
            </Trigger>
            <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                Property="Canvas.Left"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}"
                   TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle Name="Bg" Fill="{TemplateBinding Control.Background}"
                 Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
            <Rectangle x:Name="InnerBorder" Margin="1" RadiusX="2" RadiusY="2"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="37"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="1" VerticalAlignment="Center" ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <Border x:Name="GlyphPanel" Background="#E6EFF4" BorderBrush="#CDD3E6" BorderThickness="1" CornerRadius="3"
                Margin="1" Visibility="Hidden" Width="22" Height="22">
                    <Path Name="Glyph" Width="9" Height="11" Fill="#0C12A1" FlowDirection="LeftToRight"
                Data="{StaticResource Ę}"/>
                </Border>
                <ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Control.Padding}"
                          RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <TextBlock Grid.Column="4" Text="{TemplateBinding MenuItem.InputGestureText}"
                   Margin="{TemplateBinding Control.Padding}"/>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Bg" Value="{StaticResource ě}" Property="Shape.Fill"/>
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="#8071CBF1"/>
                <Setter TargetName="InnerBorder" Property="Shape.Stroke" Value="#40FFFFFF"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="#FF9A9A9A"/>
                <Setter TargetName="GlyphPanel" Property="Border.Background" Value="#EEE9E9"/>
                <Setter TargetName="GlyphPanel" Property="Border.BorderBrush" Value="#DBD6D6"/>
                <Setter TargetName="Glyph" Property="Shape.Fill" Value="#848589"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}"
                   TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle Name="Bg" Fill="{TemplateBinding Control.Background}"
                 Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
            <Rectangle x:Name="InnerBorder" Margin="1" Stroke="Transparent" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="37"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="1" VerticalAlignment="Center" ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <Border x:Name="GlyphPanel" Background="#E6EFF4" BorderBrush="#CDD3E6" BorderThickness="1" CornerRadius="3"
                Margin="1" Visibility="Hidden" Width="22" Height="22">
                    <Path Name="Glyph" Width="9" Height="11" Fill="#0C12A1" FlowDirection="LeftToRight"
                Data="{StaticResource Ę}"/>
                </Border>
                <ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Control.Padding}"
                          RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <TextBlock Grid.Column="4" Text="{TemplateBinding MenuItem.InputGestureText}"
                   Margin="{TemplateBinding Control.Padding}" Visibility="Collapsed"/>
                <Path Grid.Column="5" VerticalAlignment="Center" Margin="4,0,0,0"
              Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource ė}"/>
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Right" VerticalOffset="-3"
             HorizontalOffset="-2" Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                    <Border Name="SubMenuBorder" Background="{StaticResource ę}" BorderBrush="#FF959595" BorderThickness="1">
                        <ScrollViewer Name="SubMenuScrollViewer" Margin="1,0"
                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle Name="OpaqueRect" Fill="{StaticResource ę}"
                             Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                             Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"/>
                                </Canvas>
                                <Rectangle Fill="#F1F1F1" HorizontalAlignment="Left" Width="28" Margin="1,2" RadiusX="2" RadiusY="2"/>
                                <Rectangle HorizontalAlignment="Left" Width="1" Margin="29,2,0,2" Fill="#E2E3E3"/>
                                <Rectangle HorizontalAlignment="Left" Width="1" Margin="30,2,0,2" Fill="White"/>
                                <ItemsPresenter Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Grid.IsSharedSizeScope="true"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </themes:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="InnerBorder" Property="Shape.Stroke" Value="#D1DBF4FF"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Bg" Value="{StaticResource ě}" Property="Shape.Fill"/>
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="#8571CBF1"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="#FF9A9A9A"/>
                <Setter TargetName="GlyphPanel" Property="Border.Background" Value="#EEE9E9"/>
                <Setter TargetName="GlyphPanel" Property="Border.BorderBrush" Value="#DBD6D6"/>
                <Setter TargetName="Glyph" Property="Shape.Fill" Value="#848589"/>
            </Trigger>
            <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                Property="Canvas.Left"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template"
            Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}}"/>
        <Style.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                <Setter Property="Control.Padding" Value="7,2,8,3"/>
                <Setter Property="Control.Template"
                Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="TopLevelItem">
                <Setter Property="Control.Padding" Value="7,2,8,3"/>
                <Setter Property="Control.Template"
                Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                <Setter Property="Control.Padding" Value="2,3,2,3"/>
                <Setter Property="Control.Template"
                Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuItem">
                <Setter Property="Control.Padding" Value="2,3,2,3"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <JournalEntryUnifiedViewConverter x:Key="Ą"/>
    <LinearGradientBrush x:Key="ĝ" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFFFFF" Offset="0.0"/>
                <GradientStop Color="#CCD4E9" Offset="0.1"/>
                <GradientStop Color="#4881D2" Offset="0.47"/>
                <GradientStop Color="#001A5A" Offset="0.47"/>
                <GradientStop Color="#007BD6" Offset="0.70"/>
                <GradientStop Color="#54DAFF" Offset="0.85"/>
                <GradientStop Color="#86FFFF" Offset="0.95"/>
                <GradientStop Color="#FFFFFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ğ" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFFFFF" Offset="0.0"/>
                <GradientStop Color="#DFEDF9" Offset="0.1"/>
                <GradientStop Color="#3086E1" Offset="0.47"/>
                <GradientStop Color="#003B91" Offset="0.47"/>
                <GradientStop Color="#1793EF" Offset="0.70"/>
                <GradientStop Color="#5AD4FF" Offset="0.85"/>
                <GradientStop Color="#BDFFFF" Offset="0.95"/>
                <GradientStop Color="#FFFFFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ğ" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#C0D2F5" Offset="0.0"/>
                <GradientStop Color="#5E7A9C" Offset="0.47"/>
                <GradientStop Color="#00062D" Offset="0.47"/>
                <GradientStop Color="#005F9F" Offset="0.70"/>
                <GradientStop Color="#1FA4E2" Offset="0.85"/>
                <GradientStop Color="#61DAFF" Offset="0.95"/>
                <GradientStop Color="#48CFFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ġ" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFFFFF" Offset="0"/>
                <GradientStop Color="#EBEEF5" Offset="0.5"/>
                <GradientStop Color="#D8DDEB" Offset="0.5"/>
                <GradientStop Color="#DFE2F0" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ġ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#6C90C4" Offset="0"/>
                <GradientStop Color="#315BB4" Offset="0.5"/>
                <GradientStop Color="#002091" Offset="0.5"/>
                <GradientStop Color="#08377C" Offset="1"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ģ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#8AB1FB" Offset="0"/>
            <GradientStop Color="#002874" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ģ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFFFFF" Offset="0.5"/>
                <GradientStop Color="#EEEEEE" Offset="0.5"/>
                <GradientStop Color="#B0B0B0" Offset="1"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ĥ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#33B5DA" Offset="0"/>
                <GradientStop Color="#335799" Offset="1"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ā" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFFFFF" Offset="0"/>
            <GradientStop Color="#E3E8F4" Offset="0.5"/>
            <GradientStop Color="#CFD7EB" Offset="0.5"/>
            <GradientStop Color="#E9ECFA" Offset="1.0"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ĥ" Color="{StaticResource {x:Static SystemColors.HighlightColorKey}}" Opacity="0.25"/>
    <Style x:Key="ă" TargetType="{x:Type MenuItem}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="HeaderedItemsControl.Header" Value="{Binding Path=(JournalEntry.Name)}"/>
        <Setter Property="MenuItem.Command" Value="NavigationCommands.NavigateJournal"/>
        <Setter Property="MenuItem.CommandTarget"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Path=TemplatedParent}"/>
        <Setter Property="MenuItem.CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}"/>
        <Setter Property="JournalEntryUnifiedViewConverter.JournalEntryPosition"
            Value="{Binding (JournalEntryUnifiedViewConverter.JournalEntryPosition)}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid Name="Panel" Background="Transparent" SnapsToDevicePixels="true">
                        <Path Name="Glyph" SnapsToDevicePixels="false" Margin="7,5" Width="10" Height="10"
                  HorizontalAlignment="Left" StrokeStartLineCap="Triangle" StrokeEndLineCap="Triangle"
                  StrokeThickness="2" Stroke="{TemplateBinding Control.Foreground}"/>
                        <ContentPresenter ContentSource="Header" Margin="24,5,21,5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="JournalEntryUnifiedViewConverter.JournalEntryPosition" Value="Current">
                            <Setter TargetName="Panel" Value="{StaticResource ĥ}" Property="Panel.Background"/>
                            <Setter TargetName="Glyph" Property="Path.Data" Value="M 0,5 L 2.5,8 7,3 "/>
                            <Setter TargetName="Glyph" Property="FrameworkElement.FlowDirection" Value="LeftToRight"/>
                            <Setter TargetName="Glyph" Property="Shape.StrokeLineJoin" Value="Miter"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
                            <Setter TargetName="Panel" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Panel.Background"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition Property="JournalEntryUnifiedViewConverter.JournalEntryPosition" Value="Forward"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Glyph" Property="Shape.Stroke" Value="White"/>
                            <Setter TargetName="Glyph" Property="Path.Data" Value="M 1,5 L 7,5 M 5,1 L 9,5 5,9 "/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition Property="JournalEntryUnifiedViewConverter.JournalEntryPosition" Value="Back"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Glyph" Property="Shape.Stroke" Value="White"/>
                            <Setter TargetName="Glyph" Property="Path.Data" Value="M 9,5 L 3,5 M 5,1 L 1,5 5,9 "/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ă" TargetType="{x:Type MenuItem}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" VerticalOffset="2"
                   Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   IsOpen="{Binding Path=(MenuItem.IsSubmenuOpen), RelativeSource={RelativeSource TemplatedParent}}">
                            <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                <Border Name="SubMenuBorder" Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
                                    <ScrollViewer Name="SubMenuScrollViewer"
                                Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle Name="OpaqueRect" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                                   Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"
                                   Fill="{Binding ElementName=SubMenuBorder, Path=Background}"/>
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                      KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </themes:SystemDropShadowChrome>
                        </Popup>
                        <Grid x:Name="Panel" Width="26" Background="Transparent" HorizontalAlignment="Right">
                            <Border Name="HighlightBorder" SnapsToDevicePixels="true" Visibility="Hidden" BorderThickness="1,1,1,1"
                      BorderBrush="#B0B5BACE" CornerRadius="2">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStop Color="#20DDDDDD" Offset="0"/>
                                            <GradientStop Color="#80FFFFFF" Offset="1"/>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border BorderBrush="#A0FFFFFF" CornerRadius="1.5" BorderThickness="1"/>
                            </Border>
                            <Path x:Name="Arrow" SnapsToDevicePixels="false" HorizontalAlignment="Right" VerticalAlignment="Center"
                    Margin="{TemplateBinding Control.Padding}" Fill="{StaticResource Ĥ}" Stroke="White"
                    StrokeThickness="1" StrokeLineJoin="Round" Data="M 0,0 L 4.5,5 9,0 Z"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter TargetName="HighlightBorder" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="#A5AABE"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>
                        <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ā" TargetType="{x:Type Menu}">
        <Setter Property="ItemsControl.ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <DockPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Menu.IsMainMenu" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ą" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="ButtonBase.Command" Value="NavigationCommands.BrowseBack"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="24" Height="24" Background="Transparent">
                        <Ellipse Name="Circle" StrokeThickness="1" Fill="{StaticResource ĝ}" Stroke="{StaticResource ġ}"/>
                        <Path Name="Arrow" VerticalAlignment="Center" HorizontalAlignment="Center" StrokeThickness="0.75"
                  Data="M 0.37,7.69 L 5.74,14.2 A 1.5,1.5 0 1 0 10.26,12.27 L 8.42,10.42 14.9,10.39 A 1.5,1.5 0 1 0 14.92,5.87 L 8.44,5.9 10.31,4.03 A 1.5,1.5 0 1 0 5.79,1.77 Z"
                  Stroke="{StaticResource Ģ}" Fill="{StaticResource ģ}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource Ġ}" TargetName="Circle" Property="Shape.Fill"/>
                            <Setter TargetName="Circle" Property="Shape.Stroke" Value="#B5BACE"/>
                            <Setter TargetName="Arrow" Property="Shape.Stroke" Value="#B0B5BACE"/>
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="#D0FFFFFF"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{StaticResource Ğ}" TargetName="Circle" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ğ}" TargetName="Circle" Property="Shape.Fill"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ć" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="ButtonBase.Command" Value="NavigationCommands.BrowseForward"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="24" Height="24" Background="Transparent">
                        <Ellipse Name="Circle" Grid.Column="0" StrokeThickness="1" Fill="{StaticResource ĝ}"
                     Stroke="{StaticResource ġ}"/>
                        <Path Name="Arrow" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center"
                  StrokeThickness="0.75"
                  Data="M 0.37,7.69 L 5.74,14.2 A 1.5,1.5 0 1 0 10.26,12.27 L 8.42,10.42 14.9,10.39 A 1.5,1.5 0 1 0 14.92,5.87 L 8.44,5.9 10.31,4.03 A 1.5,1.5 0 1 0 5.79,1.77 Z"
                  Stroke="{StaticResource Ģ}" Fill="{StaticResource ģ}" RenderTransformOrigin="0.5,0">
                            <UIElement.RenderTransform>
                                <ScaleTransform ScaleX="-1"/>
                            </UIElement.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource Ġ}" TargetName="Circle" Property="Shape.Fill"/>
                            <Setter TargetName="Circle" Property="Shape.Stroke" Value="#B5BACE"/>
                            <Setter TargetName="Arrow" Property="Shape.Stroke" Value="#B0B5BACE"/>
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="#D0FFFFFF"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{StaticResource Ğ}" TargetName="Circle" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource ğ}" TargetName="Circle" Property="Shape.Fill"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="Ħ" TargetType="{x:Type NavigationWindow}">
        <Border Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}">
            <DockPanel>
                <Grid Name="NavChrome" Background="{StaticResource Ā}" DockPanel.Dock="Top" Height="30">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="29"/>
                        <ColumnDefinition Width="26"/>
                        <ColumnDefinition Width="17"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Menu Name="NavMenu" Grid.ColumnSpan="3" Height="23" Margin="1,0,0,1" VerticalAlignment="Center"
                Style="{StaticResource ā}">
                        <MenuItem Padding="0,2,5,0" Style="{StaticResource Ă}" ItemContainerStyle="{StaticResource ă}"
                      IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen), Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ItemsControl.ItemsSource>
                                <MultiBinding Converter="{StaticResource Ą}">
                                    <MultiBinding.Bindings>
                                        <Binding Path="(NavigationWindow.BackStack)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="(NavigationWindow.ForwardStack)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </ItemsControl.ItemsSource>
                        </MenuItem>
                    </Menu>
                    <Path Grid.Column="0" SnapsToDevicePixels="false" IsHitTestVisible="false" Margin="2,0,0,0"
                Grid.ColumnSpan="3" StrokeThickness="1" HorizontalAlignment="Left" VerticalAlignment="Center"
                Data="M 22.5767,21.035 Q 27,19.37 31.424,21.035 A 12.5,12.5 0 0 0 53.5,13 12.5,12.5 0 0 0 37.765,0.926 Q 27,4.93 16.235,0.926 A 12.5,12.5 0 0 0 0.5,13 12.5,12.5 0 0 0 22.5767,21.035 Z">
                        <Shape.Fill>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#A0C2CCE7" Offset="0"/>
                                        <GradientStop Color="#60FFFFFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Shape.Fill>
                        <Shape.Stroke>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#FFB7C2E3" Offset="0.2"/>
                                        <GradientStop Color="#A0FFFFFF" Offset="0.9"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Shape.Stroke>
                    </Path>
                    <Button Style="{StaticResource ą}" Margin="3,0,2,0" Grid.Column="0"/>
                    <Button Style="{StaticResource Ć}" Margin="2,0,0,0" Grid.Column="1"/>
                </Grid>
                <Grid>
                    <AdornerDecorator>
                        <ContentPresenter Name="PART_NavWinCP" ClipToBounds="true"/>
                    </AdornerDecorator>
                    <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                      Visibility="Collapsed" IsTabStop="false"/>
                </Grid>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="NavigationWindow.ShowsNavigationUI" Value="false">
                <Setter TargetName="NavChrome" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="Window.WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="WindowResizeGrip" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="NavigationWindow.CanGoForward" Value="false"/>
                    <Condition Property="NavigationWindow.CanGoBack" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="NavMenu" Property="UIElement.IsEnabled" Value="false"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type NavigationWindow}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.Template" Value="{StaticResource Ħ}"/>
    </Style>
    <Style TargetType="{x:Type Page}">
        <Setter Property="Page.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Page}">
                    <Border Background="{TemplateBinding Page.Background}">
                        <ContentPresenter Content="{TemplateBinding Page.Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ħ" EndPoint="0,1" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#B2B2B2" Offset="0"/>
            <GradientStop Color="#8C8C8C" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ĩ" EndPoint="1,0" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#BABABA" Offset="0"/>
            <GradientStop Color="#C7C7C7" Offset="0.5"/>
            <GradientStop Color="#BABABA" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ĩ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#80FFFFFF" Offset="0.05"/>
            <GradientStop Color="#00FFFFFF" Offset="0.25"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ī" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#50FFFFFF" Offset="0.5385"/>
            <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ī" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#90FFFFFF" Offset="0.5385"/>
            <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <RadialGradientBrush x:Key="Ĭ" RadiusX="1" RadiusY="1" RelativeTransform="1,0,0,1,0.5,0.5">
        <GradientBrush.GradientStops>
            <GradientStop Color="#60FFFFC4" Offset="0"/>
            <GradientStop Color="#00FFFFC4" Offset="1"/>
        </GradientBrush.GradientStops>
    </RadialGradientBrush>
    <LinearGradientBrush x:Key="ĭ" StartPoint="0,1" EndPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#60FFFFC4" Offset="0"/>
            <GradientStop Color="#00FFFFC4" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <RadialGradientBrush x:Key="Į" RadiusX="1" RadiusY="1" RelativeTransform="1,0,0,1,-0.5,0.5">
        <GradientBrush.GradientStops>
            <GradientStop Color="#60FFFFC4" Offset="0"/>
            <GradientStop Color="#00FFFFC4" Offset="1"/>
        </GradientBrush.GradientStops>
    </RadialGradientBrush>
    <LinearGradientBrush x:Key="į" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#0C000000" Offset="0"/>
            <GradientStop Color="#20000000" Offset="0.3"/>
            <GradientStop Color="#00000000" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="İ" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#00000000" Offset="0"/>
            <GradientStop Color="#20000000" Offset="0.7"/>
            <GradientStop Color="#0C000000" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ı" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#00FFFFFF" Offset="0"/>
            <GradientStop Color="#60FFFFFF" Offset="0.4"/>
            <GradientStop Color="#60FFFFFF" Offset="0.6"/>
            <GradientStop Color="#00FFFFFF" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Control.Foreground" Value="#01D328"/>
        <Setter Property="Control.Background" Value="{StaticResource Ĩ}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ħ}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid Name="TemplateRoot" SnapsToDevicePixels="true">
                        <Rectangle Fill="{TemplateBinding Control.Background}" RadiusX="2" RadiusY="2"/>
                        <Border Background="{StaticResource Ī}" Margin="1" CornerRadius="2"/>
                        <Border BorderBrush="#80FFFFFF" Background="{StaticResource ĩ}" BorderThickness="1,0,1,1" Margin="1"/>
                        <Rectangle Name="PART_Track" Margin="1"/>
                        <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
                            <Grid Name="Foreground">
                                <Rectangle x:Name="Indicator" Fill="{TemplateBinding Control.Foreground}"/>
                                <Grid x:Name="Animation" ClipToBounds="true">
                                    <Rectangle x:Name="PART_GlowRect" Width="100" Fill="{StaticResource ı}" Margin="-100,0,0,0"
                             HorizontalAlignment="Left"/>
                                </Grid>
                                <Grid x:Name="Overlay">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="15"/>
                                        <ColumnDefinition Width="0.1*"/>
                                        <ColumnDefinition MaxWidth="15"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Rectangle x:Name="LeftDark" Grid.RowSpan="2" Fill="{StaticResource į}" RadiusX="1" RadiusY="1"
                             Margin="1,1,0,1"/>
                                    <Rectangle x:Name="RightDark" Grid.RowSpan="2" Grid.Column="2" RadiusX="1" RadiusY="1"
                             Fill="{StaticResource İ}" Margin="0,1,1,1"/>
                                    <Rectangle x:Name="LeftLight" Grid.Column="0" Grid.Row="2" Fill="{StaticResource Ĭ}"/>
                                    <Rectangle x:Name="CenterLight" Grid.Column="1" Grid.Row="2" Fill="{StaticResource ĭ}"/>
                                    <Rectangle x:Name="RightLight" Grid.Column="2" Grid.Row="2" Fill="{StaticResource Į}"/>
                                    <Border x:Name="Highlight1" Grid.RowSpan="2" Grid.ColumnSpan="3" Background="{StaticResource ī}"/>
                                    <Border x:Name="Highlight2" Grid.RowSpan="2" Grid.ColumnSpan="3" Background="{StaticResource ĩ}"/>
                                </Grid>
                            </Grid>
                        </Decorator>
                        <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ProgressBar.Orientation" Value="Vertical">
                            <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ProgressBar.IsIndeterminate" Value="true">
                            <Setter TargetName="LeftDark" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="RightDark" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="LeftLight" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="CenterLight" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="RightLight" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Indicator" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ProgressBar.IsIndeterminate" Value="false">
                            <Setter TargetName="Animation" Property="Panel.Background" Value="#80B5FFA9"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="#F4F4F4"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource Ü}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <themes:BulletChrome Background="{TemplateBinding Control.Background}"
                                  BorderBrush="{TemplateBinding Control.BorderBrush}" IsRound="true"
                                  RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                  RenderPressed="{TemplateBinding ButtonBase.IsPressed}"
                                  IsChecked="{TemplateBinding ToggleButton.IsChecked}"/>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="true"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ContentControl.HasContent" Value="true">
                            <Setter Value="{StaticResource Ù}" Property="FrameworkElement.FocusVisualStyle"/>
                            <Setter Property="Control.Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="Ĳ" StartPoint="0,0.25" EndPoint="1,0.75">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFFFFF" Offset="0.3"/>
            <GradientStop Color="#BBC5D7" Offset="0.75"/>
            <GradientStop Color="#6D83A9" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type ResizeGrip}">
        <Setter Property="FrameworkElement.MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="FrameworkElement.MinHeight"
            Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ResizeGrip}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}">
                        <Path HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,2,2"
                  Data="M 9,0 L 11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3 Z">
                            <Shape.Fill>
                                <DrawingBrush Viewbox="0,0,3,3" Viewport="0,0,3,3" TileMode="Tile" ViewportUnits="Absolute"
                              ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <DrawingGroup.Children>
                                                <GeometryDrawing Brush="{StaticResource Ĳ}" Geometry="M 0,0 L 2,0 2,2 0,2 Z"/>
                                            </DrawingGroup.Children>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Shape.Fill>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ĳ" Color="#F4F4F4"/>
    <LinearGradientBrush x:Key="Ĵ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#E1E1E1" Offset="0"/>
            <GradientStop Color="#EDEDED" Offset="0.20"/>
            <GradientStop Color="#EDEDED" Offset="0.80"/>
            <GradientStop Color="#E3E3E3" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ĵ" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#E1E1E1" Offset="0"/>
            <GradientStop Color="#EDEDED" Offset="0.20"/>
            <GradientStop Color="#EDEDED" Offset="0.80"/>
            <GradientStop Color="#E3E3E3" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="Ķ" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <themes:ScrollChrome Name="Chrome" ScrollGlyph="{TemplateBinding themes:ScrollChrome.ScrollGlyph}"
                              RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                              RenderPressed="{TemplateBinding ButtonBase.IsPressed}" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ķ" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <themes:ScrollChrome x:Name="Chrome" ScrollGlyph="{TemplateBinding themes:ScrollChrome.ScrollGlyph}"
                              RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                              RenderPressed="{TemplateBinding Thumb.IsDragging}" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ĸ" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Control.Background}" Width="{TemplateBinding FrameworkElement.Width}"
                     Height="{TemplateBinding FrameworkElement.Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ĺ" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Control.Background}" Width="{TemplateBinding FrameworkElement.Width}"
                     Height="{TemplateBinding FrameworkElement.Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Control.Background" Value="{StaticResource ĵ}"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FrameworkElement.Width"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="FrameworkElement.MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid Name="Bg" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <RepeatButton Style="{StaticResource Ķ}" IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                          Command="{x:Static ScrollBar.LineUpCommand}" themes:ScrollChrome.ScrollGlyph="UpArrow"/>
                        <Track Name="PART_Track" Grid.Row="1" IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                   IsDirectionReversed="true">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource Ĺ}" Command="{x:Static ScrollBar.PageUpCommand}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource Ĺ}" Command="{x:Static ScrollBar.PageDownCommand}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ķ}" themes:ScrollChrome.ScrollGlyph="VerticalGripper"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton Style="{StaticResource Ķ}" Grid.Row="2" IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                          Command="{x:Static ScrollBar.LineDownCommand}" themes:ScrollChrome.ScrollGlyph="DownArrow"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bg" Value="{StaticResource ĳ}" Property="Panel.Background"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
                <Setter Property="FrameworkElement.Width" Value="Auto"/>
                <Setter Property="FrameworkElement.MinWidth" Value="0"/>
                <Setter Property="FrameworkElement.Height"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="FrameworkElement.MinHeight"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="Control.Background" Value="{StaticResource Ĵ}"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid Name="Bg" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <RepeatButton Style="{StaticResource Ķ}" IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                              Command="{x:Static ScrollBar.LineLeftCommand}" themes:ScrollChrome.ScrollGlyph="LeftArrow"/>
                                <Track Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ĸ}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ĸ}" Command="{x:Static ScrollBar.PageRightCommand}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ķ}" themes:ScrollChrome.ScrollGlyph="HorizontalGripper"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton Style="{StaticResource Ķ}" Grid.Column="2" IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                              Command="{x:Static ScrollBar.LineRightCommand}" themes:ScrollChrome.ScrollGlyph="RightArrow"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="Bg" Value="{StaticResource ĳ}" Property="Panel.Background"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
        <Setter Property="FrameworkElement.Margin" Value="0,2,0,2"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true" Height="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Geometry x:Key="ĺ">
        M 4.5,-7.5 A 1 1 0 0 0 3.5,-8.5 L -3.5,-8.5 A 1 1 0 0 0 -4.5,-7.5 L -4.5,4.5 L -0.5,8.5 L 0.5,8.5 L 4.5,4.5 Z
    </Geometry>
    <Geometry x:Key="Ļ">
        M 3.5,-7.5 L -3.5,-7.5 L -3.5,4.5 L 0,8 L 3.5,4.5 Z
    </Geometry>
    <Geometry x:Key="ļ">
        M 2.5,-6.5 L -2.5,-6.5 L -2.5,4.5 L 0,7 L 2.5 4.5 Z
    </Geometry>
    <Geometry x:Key="Ľ">
        M 4.5,-8.5 L -4.5,-8.5 L -4.5,4.5 L -0.5,8.5 L 0.5,8.5 L 4.5,4.5 Z
    </Geometry>
    <Geometry x:Key="ľ">
        M -5,-9.5 A 1 1 0 0 1 -4,-10.5 L 4,-10.5 A 1 1 0 0 1 5,-9.5 L 5,9.5 A 1 1 0 0 1 4,10.5 L -4,10.5 A 1 1 0 0 1 -5,9.5 Z
    </Geometry>
    <Geometry x:Key="Ŀ">
        M -4,-9.5 L 4,-9.5 L 4,9.5 L -4,9.5 Z
    </Geometry>
    <Geometry x:Key="ŀ">
        M -5,-10.5 L 5,-10.5 L 5,10.5 L -5,10.5 Z
    </Geometry>
    <LinearGradientBrush x:Key="Ł" EndPoint="0,1" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0"/>
            <GradientStop Color="#F0EFEF" Offset="0.4"/>
            <GradientStop Color="#D6D5D5" Offset=".8"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ł" EndPoint="0,0" StartPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0"/>
            <GradientStop Color="#F0EFEF" Offset="0.4"/>
            <GradientStop Color="#D6D5D5" Offset=".8"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ń" EndPoint="1,0" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0"/>
            <GradientStop Color="#F0EFEF" Offset="0.4"/>
            <GradientStop Color="#D6D5D5" Offset=".8"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ń" EndPoint="0,0" StartPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0"/>
            <GradientStop Color="#F0EFEF" Offset="0.4"/>
            <GradientStop Color="#D6D5D5" Offset=".8"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ņ" EndPoint="0,1" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="white" Offset="0"/>
            <GradientStop Color="#B8E2F9" Offset="0.5"/>
            <GradientStop Color="#B0DFF8" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ņ" EndPoint="0,0" StartPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="white" Offset="0"/>
            <GradientStop Color="#B8E2F9" Offset="0.5"/>
            <GradientStop Color="#B0DFF8" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ň" EndPoint="1,0" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="white" Offset="0"/>
            <GradientStop Color="#B8E2F9" Offset="0.5"/>
            <GradientStop Color="#B0DFF8" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ň" EndPoint="0,0" StartPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="white" Offset="0"/>
            <GradientStop Color="#B8E2F9" Offset="0.5"/>
            <GradientStop Color="#B0DFF8" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ŉ" Color="#3C7FB1"/>
    <LinearGradientBrush x:Key="Ŋ" EndPoint="0,1" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#B8E4FA" Offset="0.25"/>
            <GradientStop Color="#5EB4E3" Offset="0.5"/>
            <GradientStop Color="#4C8BB4" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ŋ" EndPoint="0,0" StartPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#B8E4FA" Offset="0.25"/>
            <GradientStop Color="#5EB4E3" Offset="0.5"/>
            <GradientStop Color="#4C8BB4" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ō" EndPoint="1,0" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#B8E4FA" Offset="0.25"/>
            <GradientStop Color="#5EB4E3" Offset="0.5"/>
            <GradientStop Color="#4C8BB4" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ō" EndPoint="0,0" StartPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#B8E4FA" Offset="0.25"/>
            <GradientStop Color="#5EB4E3" Offset="0.5"/>
            <GradientStop Color="#4C8BB4" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Ŏ" Color="#2C628B"/>
    <SolidColorBrush x:Key="ŏ" Color="#FFE7EAEA"/>
    <LinearGradientBrush x:Key="Ő" EndPoint="0,1" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFAEB1AF" Offset="0.1"/>
            <GradientStop Color="White" Offset=".9"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="ő" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Œ" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="FrameworkElement.Height" Value="22"/>
        <Setter Property="FrameworkElement.Width" Value="11"/>
        <Setter Property="Control.Foreground" Value="Gray"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true">
                        <UIElement.RenderTransform>
                            <TranslateTransform X="5.5" Y="11"/>
                        </UIElement.RenderTransform>
                        <Path x:Name="Background" Fill="{StaticResource Ł}" Data="{StaticResource ľ}"/>
                        <Path x:Name="InnerBorder" Stroke="White" Data="{StaticResource Ŀ}"/>
                        <Path x:Name="OuterBorder" Stroke="#FF929292" Data="{StaticResource ľ}"/>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource Ņ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Control.Foreground" Value="Blue">
                            <Setter TargetName="Background" Value="{StaticResource Ņ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource Ŋ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ŏ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Shape.Fill" Value="#FFF4F4F4"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Shape.Stroke"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŀ}" Property="Path.Data"/>
                            <Setter TargetName="OuterBorder" Property="Shape.Stroke" Value="#FFAEB1AF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="œ" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="FrameworkElement.Height" Value="18"/>
        <Setter Property="FrameworkElement.Width" Value="10"/>
        <Setter Property="Control.Foreground" Value="Gray"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true">
                        <UIElement.RenderTransform>
                            <TransformGroup>
                                <TransformGroup.Children>
                                    <TransformCollection>
                                        <RotateTransform Angle="180"/>
                                        <TranslateTransform X="5" Y="9"/>
                                    </TransformCollection>
                                </TransformGroup.Children>
                            </TransformGroup>
                        </UIElement.RenderTransform>
                        <Path x:Name="Background" Fill="{StaticResource ł}" Data="{StaticResource ĺ}"/>
                        <Path x:Name="InnerBorder" Stroke="White" StrokeThickness="1" Data="{StaticResource Ļ}"/>
                        <Path x:Name="OuterBorder" Stroke="#FF929292" StrokeThickness="1" Data="{StaticResource ĺ}"/>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource ņ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Control.Foreground" Value="Blue">
                            <Setter TargetName="Background" Value="{StaticResource ņ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource ŋ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ŏ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Shape.Fill" Value="#FFF4F4F4"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Shape.Stroke"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŀ}" Property="Path.Data"/>
                            <Setter TargetName="OuterBorder" Property="Shape.Stroke" Value="#FFAEB1AF"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ľ}" Property="Path.Data"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ŕ" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="FrameworkElement.Height" Value="18"/>
        <Setter Property="FrameworkElement.Width" Value="10"/>
        <Setter Property="Control.Foreground" Value="Gray"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true">
                        <UIElement.RenderTransform>
                            <TranslateTransform X="5" Y="9"/>
                        </UIElement.RenderTransform>
                        <Path x:Name="Background" Fill="{StaticResource Ł}" Data="{StaticResource ĺ}"/>
                        <Path x:Name="InnerBorder" Stroke="White" StrokeThickness="1" Data="{StaticResource Ļ}"/>
                        <Path x:Name="OuterBorder" Stroke="#FF929292" StrokeThickness="1" Data="{StaticResource ĺ}"/>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource Ņ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Control.Foreground" Value="Blue">
                            <Setter TargetName="Background" Value="{StaticResource Ņ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource Ŋ}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ŏ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Shape.Fill" Value="#FFF4F4F4"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Shape.Stroke"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŀ}" Property="Path.Data"/>
                            <Setter TargetName="OuterBorder" Property="Shape.Stroke" Value="#FFAEB1AF"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ľ}" Property="Path.Data"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ŕ" EndPoint="1,0" StartPoint="0,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFAEB1AF" Offset="0.1"/>
            <GradientStop Color="White" Offset=".9"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="Ŗ" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="FrameworkElement.Height" Value="11"/>
        <Setter Property="FrameworkElement.Width" Value="22"/>
        <Setter Property="Control.Foreground" Value="Gray"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true">
                        <UIElement.RenderTransform>
                            <TransformGroup>
                                <TransformGroup.Children>
                                    <TransformCollection>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform X="11" Y="5.5"/>
                                    </TransformCollection>
                                </TransformGroup.Children>
                            </TransformGroup>
                        </UIElement.RenderTransform>
                        <Path x:Name="Background" Fill="{StaticResource Ń}" Data="{StaticResource ľ}"/>
                        <Path x:Name="InnerBorder" Stroke="White" StrokeThickness="1" Data="{StaticResource Ŀ}"/>
                        <Path x:Name="OuterBorder" Stroke="#FF929292" StrokeThickness="1" Data="{StaticResource ľ}"/>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource Ň}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Control.Foreground" Value="Blue">
                            <Setter TargetName="Background" Value="{StaticResource Ň}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource Ō}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ŏ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Shape.Fill" Value="#FFF4F4F4"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Shape.Stroke"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŀ}" Property="Path.Data"/>
                            <Setter TargetName="OuterBorder" Property="Shape.Stroke" Value="#FFAEB1AF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ŗ" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="FrameworkElement.Height" Value="10"/>
        <Setter Property="FrameworkElement.Width" Value="18"/>
        <Setter Property="Control.Foreground" Value="Gray"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true">
                        <UIElement.RenderTransform>
                            <TransformGroup>
                                <TransformGroup.Children>
                                    <TransformCollection>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform X="9" Y="5"/>
                                    </TransformCollection>
                                </TransformGroup.Children>
                            </TransformGroup>
                        </UIElement.RenderTransform>
                        <Path x:Name="Background" Fill="{StaticResource Ń}" Data="{StaticResource ĺ}"/>
                        <Path x:Name="InnerBorder" Stroke="White" StrokeThickness="1" Data="{StaticResource Ļ}"/>
                        <Path x:Name="OuterBorder" Stroke="#FF929292" StrokeThickness="1" Data="{StaticResource ĺ}"/>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource Ň}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Control.Foreground" Value="Blue">
                            <Setter TargetName="Background" Value="{StaticResource Ň}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource Ō}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ŏ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Shape.Fill" Value="#FFF4F4F4"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Shape.Stroke"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ľ}" Property="Path.Data"/>
                            <Setter TargetName="OuterBorder" Property="Shape.Stroke" Value="#FFAEB1AF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ř" TargetType="{x:Type Thumb}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="FrameworkElement.Height" Value="10"/>
        <Setter Property="FrameworkElement.Width" Value="18"/>
        <Setter Property="Control.Foreground" Value="Gray"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true">
                        <UIElement.RenderTransform>
                            <TransformGroup>
                                <TransformGroup.Children>
                                    <TransformCollection>
                                        <RotateTransform Angle="-90"/>
                                        <TranslateTransform X="9" Y="5"/>
                                    </TransformCollection>
                                </TransformGroup.Children>
                            </TransformGroup>
                        </UIElement.RenderTransform>
                        <Path x:Name="Background" Fill="{StaticResource ń}" Data="{StaticResource ĺ}"/>
                        <Path x:Name="InnerBorder" Stroke="White" StrokeThickness="1" Data="{StaticResource Ļ}"/>
                        <Path x:Name="OuterBorder" Stroke="#FF929292" StrokeThickness="1" Data="{StaticResource ĺ}"/>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource ň}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Control.Foreground" Value="Blue">
                            <Setter TargetName="Background" Value="{StaticResource ň}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource ŉ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="Background" Value="{StaticResource ō}" Property="Shape.Fill"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ŏ}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Shape.Fill" Value="#FFF4F4F4"/>
                            <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Shape.Stroke"/>
                            <Setter TargetName="OuterBorder" Value="{StaticResource Ľ}" Property="Path.Data"/>
                            <Setter TargetName="OuterBorder" Property="Shape.Stroke" Value="#FFAEB1AF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Foreground" Value="#FFC4C4C4"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TickBar x:Name="TopTick" Grid.Row="0" Visibility="Collapsed" Placement="Top"
                                     Fill="{TemplateBinding Control.Foreground}" Height="4"/>
                            <TickBar x:Name="BottomTick" Grid.Row="2" Visibility="Collapsed" Placement="Bottom"
                                     Fill="{TemplateBinding Control.Foreground}" Height="4"/>
                            <Border x:Name="TrackBackground" Grid.Row="1" Margin="5,0" VerticalAlignment="center"
                                    BorderBrush="{StaticResource Ő}" BorderThickness="1" CornerRadius="1"
                                    Background="{StaticResource ŏ}" Height="4.0">
                                <Canvas Margin="-6,-1">
                                    <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                               Height="4.0" Visibility="Hidden" StrokeThickness="1.0"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                </Canvas>
                            </Border>
                            <Track Name="PART_Track" Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource ő}" Command="{x:Static Slider.DecreaseLarge}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource ő}" Command="{x:Static Slider.IncreaseLarge}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Style="{StaticResource Œ}"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Slider.TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Thumb" Value="{StaticResource œ}" Property="FrameworkElement.Style"/>
                            <Setter TargetName="TrackBackground" Property="FrameworkElement.Margin" Value="5,2,5,0"/>
                        </Trigger>
                        <Trigger Property="Slider.TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="Thumb" Value="{StaticResource Ŕ}" Property="FrameworkElement.Style"/>
                            <Setter TargetName="TrackBackground" Property="FrameworkElement.Margin" Value="5,0,5,2"/>
                        </Trigger>
                        <Trigger Property="Slider.TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Slider.IsSelectionRangeEnabled" Value="true">
                            <Setter TargetName="PART_SelectionRange" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Thumb" Property="Control.Foreground" Value="Blue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Slider.Orientation" Value="Vertical">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <Border Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding FrameworkElement.MinWidth}"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TickBar x:Name="TopTick" Grid.Column="0" Visibility="Collapsed" Placement="Left"
                           Fill="{TemplateBinding Control.Foreground}" Width="4"/>
                                    <TickBar x:Name="BottomTick" Grid.Column="2" Visibility="Collapsed" Placement="Right"
                           Fill="{TemplateBinding Control.Foreground}" Width="4"/>
                                    <Border Name="TrackBackground" Grid.Column="1" Margin="0,5" HorizontalAlignment="center"
                          BorderBrush="{StaticResource ŕ}" BorderThickness="1" CornerRadius="1"
                          Background="{StaticResource ŏ}" Width="4.0">
                                        <Canvas Margin="-1,-6">
                                            <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                 Width="4.0" Visibility="Hidden" StrokeThickness="1.0"
                                 Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                        </Canvas>
                                    </Border>
                                    <Track Name="PART_Track" Grid.Column="1">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Style="{StaticResource ő}" Command="{x:Static Slider.DecreaseLarge}"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Style="{StaticResource ő}" Command="{x:Static Slider.IncreaseLarge}"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb x:Name="Thumb" Style="{StaticResource Ŗ}"/>
                                        </Track.Thumb>
                                    </Track>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Slider.TickPlacement" Value="TopLeft">
                                    <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Thumb" Value="{StaticResource ŗ}" Property="FrameworkElement.Style"/>
                                    <Setter TargetName="TrackBackground" Property="FrameworkElement.Margin" Value="2,5,0,5"/>
                                </Trigger>
                                <Trigger Property="Slider.TickPlacement" Value="BottomRight">
                                    <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Thumb" Value="{StaticResource Ř}" Property="FrameworkElement.Style"/>
                                    <Setter TargetName="TrackBackground" Property="FrameworkElement.Margin" Value="0,5,2,5"/>
                                </Trigger>
                                <Trigger Property="Slider.TickPlacement" Value="Both">
                                    <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="Slider.IsSelectionRangeEnabled" Value="true">
                                    <Setter TargetName="PART_SelectionRange" Property="UIElement.Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                                    <Setter TargetName="Thumb" Property="Control.Foreground" Value="Blue"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StatusBar}">
        <Setter Property="Control.Background" Value="#FFF1EDED"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="Control.FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="Control.FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Control.Background"
            Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
        <Setter Property="FrameworkElement.MinWidth" Value="1"/>
        <Setter Property="FrameworkElement.MinHeight" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="2"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type StatusBarItem}">
        <Setter Property="Control.Padding" Value="3"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ř" Color="#8C8E94"/>
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Padding" Value="4,4,4,4"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ř}"/>
        <Setter Property="Control.Background" Value="#F9F9F9"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="true" ClipToBounds="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" ZIndex="1" KeyboardNavigation.TabIndex="1" Grid.Column="0" Grid.Row="0"
                      Margin="2,2,2,0" IsItemsHost="true"/>
                        <Border x:Name="ContentPanel" Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2"
                    Grid.Column="0" Grid.Row="1">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                Margin="{TemplateBinding Control.Padding}" ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.Margin" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ś">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="3,3,3,1" StrokeThickness="1"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2"
                     SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ś" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#EAF6FD" Offset="0.15"/>
            <GradientStop Color="#D9F0FC" Offset=".5"/>
            <GradientStop Color="#BEE6FD" Offset=".5"/>
            <GradientStop Color="#A7D9F5" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Ŝ" Color="#F9F9F9"/>
    <SolidColorBrush x:Key="ŝ" Color="#F4F4F4"/>
    <SolidColorBrush x:Key="Ş" Color="#3C7FB1"/>
    <SolidColorBrush x:Key="ş" Color="#FFC9C7BA"/>
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource Ś}"/>
        <Setter Property="Control.Foreground" Value="Black"/>
        <Setter Property="Control.Padding" Value="6,1,6,1"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ř}"/>
        <Setter Property="Control.Background" Value="{StaticResource Ò}"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border Name="Bd" Padding="{TemplateBinding Control.Padding}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" BorderThickness="1,1,1,0">
                            <ContentPresenter Name="Content" ContentSource="Header"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" RecognizesAccessKey="true"
                                HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource ś}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="TabItem.IsSelected" Value="true">
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter TargetName="Bd" Value="{StaticResource Ŝ}" Property="Border.Background"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TabItem.IsSelected" Value="false"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Value="{StaticResource Ş}" Property="Border.BorderBrush"/>
                        </MultiTrigger>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="Bd" Property="Border.BorderThickness" Value="1,0,1,1"/>
                        </Trigger>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Left">
                            <Setter TargetName="Bd" Property="Border.BorderThickness" Value="1,1,0,1"/>
                        </Trigger>
                        <Trigger Property="TabItem.TabStripPlacement" Value="Right">
                            <Setter TargetName="Bd" Property="Border.BorderThickness" Value="0,1,1,1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TabItem.IsSelected" Value="true"/>
                                <Condition Property="TabItem.TabStripPlacement" Value="Top"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,-2,-1"/>
                            <Setter TargetName="Content" Property="FrameworkElement.Margin" Value="0,0,0,1"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TabItem.IsSelected" Value="true"/>
                                <Condition Property="TabItem.TabStripPlacement" Value="Bottom"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-1,-2,-2"/>
                            <Setter TargetName="Content" Property="FrameworkElement.Margin" Value="0,1,0,0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TabItem.IsSelected" Value="true"/>
                                <Condition Property="TabItem.TabStripPlacement" Value="Left"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,-1,-2"/>
                            <Setter TargetName="Content" Property="FrameworkElement.Margin" Value="0,0,1,0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TabItem.IsSelected" Value="true"/>
                                <Condition Property="TabItem.TabStripPlacement" Value="Right"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin" Value="-1,-2,-2,-2"/>
                            <Setter TargetName="Content" Property="FrameworkElement.Margin" Value="1,0,0,0"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bd" Value="{StaticResource ŝ}" Property="Border.Background"/>
                            <Setter TargetName="Bd" Value="{StaticResource ş}" Property="Border.BorderBrush"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ã" StartPoint="0,0" EndPoint="0,20" MappingMode="Absolute">
        <GradientBrush.GradientStops>
            <GradientStop Color="#ABADB3" Offset="0.05"/>
            <GradientStop Color="#E2E3EA" Offset="0.07"/>
            <GradientStop Color="#E3E9EF" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type TextBoxBase}" BasedOn="{x:Null}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ã}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <themes:ListBoxChrome x:Name="Bd" BorderThickness="{TemplateBinding Control.BorderThickness}"
                               BorderBrush="{TemplateBinding Control.BorderBrush}"
                               Background="{TemplateBinding Control.Background}"
                               RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                               RenderFocused="{TemplateBinding UIElement.IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </themes:ListBoxChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="themes:ListBoxChrome.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="TextBoxBase.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="TextBoxBase.SelectionBrush"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource {x:Type TextBoxBase}}" TargetType="{x:Type TextBox}"/>
    <Style BasedOn="{StaticResource {x:Type TextBoxBase}}" TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style TargetType="{x:Type FlowDocument}">
                <Setter Property="FrameworkContentElement.OverridesDefaultStyle" Value="true"/>
            </Style>
            <Style BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="ContentElement.IsMouseOver" Value="true">
                        <Setter Property="TextElement.Foreground" Value="Blue"/>
                    </Trigger>
                    <Trigger Property="ContentElement.IsEnabled" Value="false">
                        <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="FrameworkElement.MinWidth" Value="10"/>
    </Style>
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ã}"/>
        <Setter Property="Control.FontFamily" Value="Times New Roman"/>
        <Setter Property="PasswordBox.PasswordChar" Value="●"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <themes:ListBoxChrome x:Name="Bd" BorderThickness="{TemplateBinding Control.BorderThickness}"
                               BorderBrush="{TemplateBinding Control.BorderBrush}"
                               Background="{TemplateBinding Control.Background}"
                               RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                               RenderFocused="{TemplateBinding UIElement.IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </themes:ListBoxChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="themes:ListBoxChrome.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="PasswordBox.IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="PasswordBox.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="PasswordBox.SelectionBrush"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Thumb}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <Grid>
                            <Border BorderThickness="0,0,1,1" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Border BorderThickness="0,0,1,1" Margin="1"
                      Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                      BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Border Margin="2" Background="{TemplateBinding Control.Background}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="Ź" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFFFFF" Offset="0"/>
            <GradientStop Color="#E4E5F0" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.BorderBrush" Value="#767676"/>
        <Setter Property="Control.Background" Value="{StaticResource Ź}"/>
        <Setter Property="Control.Foreground" Value="#575757"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="Control.FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="Control.FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Control.Padding" Value="5,1,5,4"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="ToolTip.HasDropShadow"
            Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent" SnapsToDevicePixels="true" CornerRadius="2">
                        <Border Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}"
                    CornerRadius="2">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Border>
                    </themes:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToolTip.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource ĉ}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                        <ScrollViewer Name="_tv_scrollviewer_" Background="{TemplateBinding Control.Background}" Focusable="false"
                          CanContentScroll="false"
                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                          Padding="{TemplateBinding Control.Padding}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                            <Setter TargetName="_tv_scrollviewer_" Property="ScrollViewer.CanContentScroll" Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsControl.ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <SolidColorBrush x:Key="ź" Color="#FF989898"/>
    <SolidColorBrush x:Key="Ż" Color="Transparent"/>
    <SolidColorBrush x:Key="ż" Color="#FF1BBBFA"/>
    <SolidColorBrush x:Key="Ž" Color="Transparent"/>
    <SolidColorBrush x:Key="ž" Color="#FF262626"/>
    <SolidColorBrush x:Key="ſ" Color="#FF595959"/>
    <SolidColorBrush x:Key="ƀ" Color="#FF262626"/>
    <SolidColorBrush x:Key="Ɓ" Color="#FF595959"/>
    <PathGeometry x:Key="Ƃ">
        <PathGeometry.Figures>
            <PathFigureCollection>
                <PathFigure IsFilled="true" StartPoint="0 0" IsClosed="true">
                    <PathFigure.Segments>
                        <PathSegmentCollection>
                            <LineSegment Point="0 6"/>
                            <LineSegment Point="6 0"/>
                        </PathSegmentCollection>
                    </PathFigure.Segments>
                </PathFigure>
            </PathFigureCollection>
        </PathGeometry.Figures>
    </PathGeometry>
    <Style x:Key="ƃ" TargetType="{x:Type ToggleButton}">
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="FrameworkElement.Width" Value="16"/>
        <Setter Property="FrameworkElement.Height" Value="16"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
                        <Path x:Name="ExpandPath" Fill="{StaticResource Ż}" Stroke="{StaticResource ź}" Data="{StaticResource Ƃ}">
                            <UIElement.RenderTransform>
                                <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                            </UIElement.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath" Value="{StaticResource ſ}" Property="Shape.Fill"/>
                            <Setter TargetName="ExpandPath" Value="{StaticResource ž}" Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="ExpandPath" Value="{StaticResource ż}" Property="Shape.Stroke"/>
                            <Setter TargetName="ExpandPath" Value="{StaticResource Ž}" Property="Shape.Fill"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpandPath" Value="{StaticResource ƀ}" Property="Shape.Stroke"/>
                            <Setter TargetName="ExpandPath" Value="{StaticResource Ɓ}" Property="Shape.Fill"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ƅ">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Control.Padding" Value="1,0,0,0"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource Ƅ}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{StaticResource ƃ}" ClickMode="Press"
                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border Name="Bd" Grid.Column="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsSelected" Value="true">
                            <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                <Condition Property="TreeViewItem.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                      Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"
                      Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsControl.ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type UserControl}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type UserControl}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ƅ" TargetType="{x:Type Window}">
        <Border Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid>
                <AdornerDecorator>
                    <ContentPresenter/>
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                    Visibility="Collapsed" IsTabStop="false"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="Window.WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="WindowResizeGrip" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type Window}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Window.ResizeMode" Value="CanResizeWithGrip">
                <Setter Property="Control.Template" Value="{StaticResource ƅ}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <JournalEntryListConverter x:Key="È"/>
    <Style x:Key="É" TargetType="{x:Type MenuItem}">
        <Setter Property="HeaderedItemsControl.Header" Value="{Binding Path=Name}"/>
        <Setter Property="MenuItem.Command" Value="NavigationCommands.NavigateJournal"/>
        <Setter Property="MenuItem.CommandTarget"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}"/>
        <Setter Property="MenuItem.CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}"/>
    </Style>
    <Style x:Key="Ê" TargetType="{x:Type MenuItem}">
        <Setter Property="FrameworkElement.Margin" Value="0"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <DockPanel x:Name="Panel" Background="Transparent">
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                <Border Name="SubMenuBorder" Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
                                    <ScrollViewer Name="SubMenuScrollViewer"
                                Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle Name="OpaqueRect" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                                   Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"
                                   Fill="{Binding ElementName=SubMenuBorder, Path=Background}"/>
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                      KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </themes:SystemDropShadowChrome>
                        </Popup>
                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0 2 0 0"
                  Fill="White" Stroke="#AAAAAA" StrokeThickness="1" Data="{StaticResource Ë}"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill"/>
                            <Setter TargetName="Panel" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Panel.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>
                        <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ì" TargetType="{x:Type Menu}">
        <Setter Property="ItemsControl.ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <DockPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Padding" Value="0,0,0,0"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Menu.IsMainMenu" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Í" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
        <Setter Property="UIElement.IsEnabled" Value="false"/>
        <Setter Property="ButtonBase.Command" Value="NavigationCommands.BrowseBack"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <DockPanel>
                        <Rectangle x:Name="R1" DockPanel.Dock="Right" Width="1" Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <Rectangle x:Name="B1" DockPanel.Dock="Bottom" Height="1" Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <Rectangle x:Name="L1" DockPanel.Dock="Left" Width="1" Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        <Rectangle x:Name="T1" DockPanel.Dock="Top" Height="1" Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Viewbox Grid.Column="0" Grid.Row="0">
                                <Grid Width="50" Height="50" Margin="15,0,0,0">
                                    <Ellipse x:Name="EllipseBackground" Opacity="1" StrokeThickness="2">
                                        <Shape.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="#B3E2A2" Offset="0"/>
                                                        <GradientStop Color="#25B40E" Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Shape.Fill>
                                        <Shape.Stroke>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="black" Offset="0"/>
                                                        <GradientStop Color="#ccffffff" Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Shape.Stroke>
                                    </Ellipse>
                                    <Ellipse x:Name="EllipseShine" Stroke="Transparent" Margin="5,5,5,15">
                                        <Shape.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="#aaffffff" Offset="0"/>
                                                        <GradientStop Color="transparent" Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Shape.Fill>
                                    </Ellipse>
                                    <Path x:Name="Arrow" Fill="White" Stroke="#086403"
                        Data="M 0.5,20.468 C 0.502,20.808 0.536,21.147 0.602,21.481 0.634,21.643 0.694,21.793 0.741,21.949 0.793,22.125 0.833,22.304 0.904,22.476 0.98,22.659 1.084,22.825 1.178,22.997 1.251,23.129 1.309,23.267 1.394,23.394 1.59,23.688 1.812,23.962 2.061,24.211 L 16.672,38.822 C 18.755,40.905 22.131,40.905 24.214,38.822 26.297,36.739 26.297,33.363 24.214,31.28 L 18.705,25.771 42.496,25.771 C 45.441,25.771 47.829,23.383 47.829,20.438 47.829,17.492 45.441,15.105 42.496,15.105 L 18.732,15.105 24.241,9.596 C 26.324,7.513 26.324,4.137 24.241,2.054 22.158,-0.0289999999999981 18.782,-0.0289999999999981 16.699,2.054 L 2.203,16.549 C 2.16,16.589 2.108,16.619 2.067,16.66 2.065,16.662 2.062,16.663 2.06,16.666 2.058,16.668 2.057,16.67 2.055,16.672 1.809,16.919 1.59,17.189 1.396,17.479 1.308,17.611 1.247,17.754 1.172,17.892 1.08,18.059 0.98,18.22 0.906,18.397 0.834,18.572 0.792,18.754 0.739,18.935 0.694,19.088 0.635,19.234 0.604,19.393 0.536,19.732 0.5,20.075 0.5,20.419 0.5,20.425 0.498,20.431 0.498,20.438 0.498,20.448 0.5,20.458 0.5,20.468 Z">
                                        <UIElement.RenderTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <ScaleTransform ScaleX="0.65" ScaleY="0.65"/>
                                                        <TranslateTransform X="11.5" Y="10"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </UIElement.RenderTransform>
                                    </Path>
                                </Grid>
                            </Viewbox>
                            <DockPanel Grid.Column="1" Grid.Row="0">
                                <Rectangle x:Name="R2" DockPanel.Dock="Right" Width="1" Visibility="Hidden"
                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                <Rectangle x:Name="B2" DockPanel.Dock="Bottom" Height="1" Visibility="Hidden"
                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                <Rectangle x:Name="L2" DockPanel.Dock="Left" Width="1" Visibility="Hidden"
                           Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                <Rectangle x:Name="T2" DockPanel.Dock="Top" Height="1" Visibility="Hidden"
                           Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                <Grid Width="10">
                                    <Menu Style="{StaticResource Ì}">
                                        <MenuItem x:Name="NavWinMenu" Style="{StaticResource Ê}" ItemContainerStyle="{StaticResource É}"
                              ItemsSource="{Binding Path=BackStack, Converter={StaticResource È}, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}"
                              IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen), Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Menu>
                                </Grid>
                            </DockPanel>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="EllipseBackground" Property="Shape.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="white" Offset="0"/>
                                                <GradientStop Color="gray" Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="EllipseBackground" Property="Shape.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#25B40E" Offset="0"/>
                                                <GradientStop Color="#086403" Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="NavWinMenu" Property="Control.Background" Value="Transparent"/>
                            <Setter TargetName="L1" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="R1" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="T1" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="B1" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="EllipseBackground" Property="Shape.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#25B40E" Offset="0"/>
                                                <GradientStop Color="#086403" Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Arrow" Property="UIElement.RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <ScaleTransform ScaleX="0.65" ScaleY="0.65"/>
                                                <TranslateTransform X="10" Y="12"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="EllipseShine" Property="UIElement.RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform X="0" Y="2"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                            <Setter TargetName="L2" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="R2" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="T2" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="B2" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Î" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
        <Setter Property="UIElement.IsEnabled" Value="false"/>
        <Setter Property="ButtonBase.Command" Value="NavigationCommands.BrowseForward"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <DockPanel>
                        <Rectangle x:Name="R1" DockPanel.Dock="Right" Width="1" Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <Rectangle x:Name="B1" DockPanel.Dock="Bottom" Height="1" Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <Rectangle x:Name="L1" DockPanel.Dock="Left" Width="1" Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        <Rectangle x:Name="T1" DockPanel.Dock="Top" Height="1" Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Viewbox Grid.Column="0" Grid.Row="0">
                                <Grid Width="50" Height="50" Margin="15,0,0,0">
                                    <Ellipse x:Name="EllipseBackground" Opacity="1" StrokeThickness="2">
                                        <Shape.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="#B3E2A2" Offset="0"/>
                                                        <GradientStop Color="#25B40E" Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Shape.Fill>
                                        <Shape.Stroke>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="black" Offset="0"/>
                                                        <GradientStop Color="#ccffffff" Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Shape.Stroke>
                                    </Ellipse>
                                    <Ellipse x:Name="EllipseShine" Stroke="Transparent" Margin="5,3,5,15">
                                        <Shape.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="#aaffffff" Offset="0"/>
                                                        <GradientStop Color="transparent" Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Shape.Fill>
                                    </Ellipse>
                                    <Path x:Name="Arrow" Fill="White" Stroke="#086403"
                        Data="M 47.82,20.407 C 47.818,20.067 47.784,19.728 47.718,19.394 47.686,19.232 47.626,19.082 47.579,18.926 47.527,18.75 47.487,18.571 47.416,18.399 47.34,18.216 47.236,18.05 47.142,17.878 47.069,17.746 47.011,17.608 46.926,17.481 46.73,17.187 46.508,16.913 46.259,16.664 L 31.647,2.053 C 29.564,-0.0300000000000002 26.188,-0.0300000000000002 24.105,2.053 22.022,4.136 22.022,7.512 24.105,9.595 L 29.614,15.104 5.823,15.104 C 2.878,15.104 0.49,17.492 0.49,20.437 0.49,23.383 2.878,25.77 5.823,25.77 L 29.588,25.77 24.079,31.279 C 21.996,33.362 21.996,36.738 24.079,38.821 26.162,40.904 29.538,40.904 31.621,38.821 L 46.118,24.324 C 46.161,24.284 46.213,24.254 46.254,24.213 46.256,24.211 46.259,24.21 46.261,24.207 46.263,24.205 46.264,24.203 46.266,24.201 46.512,23.954 46.731,23.684 46.925,23.394 47.013,23.262 47.074,23.119 47.149,22.981 47.241,22.814 47.341,22.653 47.415,22.476 47.487,22.301 47.529,22.119 47.582,21.938 47.627,21.785 47.686,21.639 47.717,21.48 47.784,21.141 47.82,20.798 47.821,20.454 47.821,20.448 47.823,20.442 47.823,20.435 47.823,20.427 47.82,20.417 47.82,20.407 Z">
                                        <UIElement.RenderTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <ScaleTransform ScaleX="0.65" ScaleY="0.65"/>
                                                        <TranslateTransform X="8.5" Y="10"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </UIElement.RenderTransform>
                                    </Path>
                                </Grid>
                            </Viewbox>
                            <DockPanel Grid.Column="1" Grid.Row="0">
                                <Rectangle x:Name="R2" DockPanel.Dock="Right" Width="1" Visibility="Hidden"
                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                <Rectangle x:Name="B2" DockPanel.Dock="Bottom" Height="1" Visibility="Hidden"
                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                <Rectangle x:Name="L2" DockPanel.Dock="Left" Width="1" Visibility="Hidden"
                           Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                <Rectangle x:Name="T2" DockPanel.Dock="Top" Height="1" Visibility="Hidden"
                           Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                <Grid Width="10">
                                    <Menu Style="{StaticResource Ì}">
                                        <MenuItem x:Name="NavWinMenu" Style="{StaticResource Ê}" ItemContainerStyle="{StaticResource É}"
                              ItemsSource="{Binding Path=ForwardStack, Converter={StaticResource È}, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}"
                              IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen), Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Menu>
                                </Grid>
                            </DockPanel>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="EllipseBackground" Property="Shape.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="white" Offset="0"/>
                                                <GradientStop Color="gray" Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="EllipseBackground" Property="Shape.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#25B40E" Offset="0"/>
                                                <GradientStop Color="#086403" Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="NavWinMenu" Property="Control.Background" Value="Transparent"/>
                            <Setter TargetName="L1" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="R1" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="T1" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="B1" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="EllipseBackground" Property="Shape.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#25B40E" Offset="0"/>
                                                <GradientStop Color="#086403" Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Arrow" Property="UIElement.RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <ScaleTransform ScaleX="0.65" ScaleY="0.65"/>
                                                <TranslateTransform X="10" Y="12"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="EllipseShine" Property="UIElement.RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform X="0" Y="2"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                            <Setter TargetName="L2" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="R2" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="T2" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="B2" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="Ï" TargetType="{x:Type NavigationWindow}">
        <Border Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}">
            <AdornerDecorator>
                <ContentPresenter Name="PART_NavWinCP" ClipToBounds="true"/>
            </AdornerDecorator>
        </Border>
    </ControlTemplate>
    <Style x:Key="{x:Static SystemParameters.NavigationChromeStyleKey}" TargetType="{x:Type NavigationWindow}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.Template" Value="{StaticResource Ï}"/>
    </Style>
    <ControlTemplate x:Key="Ð" TargetType="{x:Type NavigationWindow}">
        <Border Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}">
            <DockPanel>
                <Grid FlowDirection="{x:Static themes:PlatformCulture.FlowDirection}" DockPanel.Dock="Top" Height="30">
                    <Panel.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="silver" Offset="0"/>
                                    <GradientStop Color="white" Offset="1"/>
                                </GradientStopCollection>
                            </GradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Panel.Background>
                    <DockPanel LastChildFill="false">
                        <Button Style="{StaticResource Í}" DockPanel.Dock="left" Width="40"
                    IsEnabled="{TemplateBinding NavigationWindow.CanGoBack}"/>
                        <Button Style="{StaticResource Î}" DockPanel.Dock="left" Width="40"
                    IsEnabled="{TemplateBinding NavigationWindow.CanGoForward}"/>
                    </DockPanel>
                </Grid>
                <Border>
                    <AdornerDecorator>
                        <ContentPresenter Name="PART_NavWinCP" ClipToBounds="true"/>
                    </AdornerDecorator>
                </Border>
            </DockPanel>
        </Border>
    </ControlTemplate>
    <Style x:Key="{x:Static SystemParameters.NavigationChromeDownLevelStyleKey}"
         TargetType="{x:Type NavigationWindow}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.Template" Value="{StaticResource Ð}"/>
        <Style.Triggers>
            <Trigger Property="NavigationWindow.ShowsNavigationUI" Value="false">
                <Setter Property="Control.Template" Value="{StaticResource Ï}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Ý">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="4,4,21,4" StrokeThickness="1"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2"
                     SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Þ" TargetType="{x:Type TextBox}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Geometry x:Key="ß">
        M 0 0 L 3.5 4 L 7 0 Z
    </Geometry>
    <Style x:Key="à" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <themes:ButtonChrome Name="Chrome" Background="{TemplateBinding Control.Background}"
                                         BorderBrush="{TemplateBinding Control.BorderBrush}"
                                         RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                         RenderPressed="{TemplateBinding ButtonBase.IsPressed}" SnapsToDevicePixels="true">
                        <Grid Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                              HorizontalAlignment="Right">
                            <Path Name="Arrow" Margin="3,1,0,0" Fill="Black" Data="{StaticResource ß}" HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
                        </Grid>
                    </themes:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Chrome" Property="themes:ButtonChrome.RenderPressed" Value="true"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="#AFAFAF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="á" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <themes:ButtonChrome Name="Chrome" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                              Background="{TemplateBinding Control.Background}"
                              BorderBrush="{TemplateBinding Control.BorderBrush}"
                              RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                              RenderPressed="{TemplateBinding ButtonBase.IsPressed}" RoundCorners="false"
                              SnapsToDevicePixels="true">
                        <Path Name="Arrow" Margin="0,1,0,0" Fill="Black" Data="{StaticResource ß}" HorizontalAlignment="Center"
                  VerticalAlignment="Center"/>
                    </themes:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Chrome" Property="themes:ButtonChrome.RenderPressed" Value="true"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="#AFAFAF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="â" TargetType="{x:Type ComboBox}">
        <Grid Name="Placement" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Popup Name="PART_Popup" Grid.ColumnSpan="2" AllowsTransparency="true" Placement="Bottom"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
             IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                      MinWidth="{Binding ElementName=Placement, Path=ActualWidth}">
                    <Border x:Name="DropDownBorder" BorderThickness="1"
                  BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                  Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer Name="DropDownScrollViewer">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle Name="OpaqueRect" Height="{Binding ElementName=DropDownBorder, Path=ActualHeight}"
                             Width="{Binding ElementName=DropDownBorder, Path=ActualWidth}"
                             Fill="{Binding ElementName=DropDownBorder, Path=Background}"/>
                                </Canvas>
                                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </themes:SystemDropShadowChrome>
            </Popup>
            <themes:ListBoxChrome x:Name="Border" Grid.ColumnSpan="2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                           BorderBrush="{TemplateBinding Control.BorderBrush}"
                           Background="{TemplateBinding Control.Background}"
                           RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                           RenderFocused="{TemplateBinding UIElement.IsKeyboardFocusWithin}"/>
            <TextBox Name="PART_EditableTextBox" Margin="{TemplateBinding Control.Padding}" Style="{StaticResource Þ}"
               HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
               VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
               IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ToggleButton Grid.Column="1" Style="{StaticResource á}"
                    IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                <Setter Property="Control.Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="ComboBox.IsDropDownOpen" Value="true">
                <Setter TargetName="Border" Property="themes:ListBoxChrome.RenderFocused" Value="true"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                <Setter Property="Control.Background" Value="#FFF4F4F4"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
            </Trigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=DropDownScrollViewer, Path=VerticalOffset}"
                Property="Canvas.Top"/>
                <Setter TargetName="OpaqueRect" Value="{Binding ElementName=DropDownScrollViewer, Path=HorizontalOffset}"
                Property="Canvas.Left"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource Ý}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{StaticResource Ò}"/>
        <Setter Property="Control.BorderBrush" Value="{StaticResource Ó}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Control.Padding" Value="4,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Name="MainGrid" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" Placement="Bottom" Margin="1"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                                           MinWidth="{Binding ElementName=MainGrid, Path=ActualWidth}">
                                <Border x:Name="DropDownBorder" BorderThickness="1"
                                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                    <ScrollViewer Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle Name="OpaqueRect" Height="{Binding ElementName=DropDownBorder, Path=ActualHeight}"
                                                           Width="{Binding ElementName=DropDownBorder, Path=ActualWidth}"
                                                           Fill="{Binding ElementName=DropDownBorder, Path=Background}"/>
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </themes:SystemDropShadowChrome>
                        </Popup>
                        <ToggleButton Grid.ColumnSpan="2" Background="{TemplateBinding Control.Background}"
                                      BorderBrush="{TemplateBinding Control.BorderBrush}" Style="{StaticResource à}"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter IsHitTestVisible="false" Margin="{TemplateBinding Control.Padding}"
                                          Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                          ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                            <Setter Property="Control.Background" Value="#FFF4F4F4"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=DropDownScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=DropDownScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ComboBox.IsEditable" Value="true">
                <Setter Property="Control.BorderBrush" Value="{StaticResource ã}"/>
                <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="Control.IsTabStop" Value="false"/>
                <Setter Property="Control.Padding" Value="3"/>
                <Setter Property="Control.Template" Value="{StaticResource â}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="ÿ" TargetType="{x:Type Frame}">
        <Border Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Padding="{TemplateBinding Control.Padding}">
            <DockPanel>
                <Grid Background="{StaticResource Ā}" DockPanel.Dock="Top" Height="22">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="16"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Menu Name="NavMenu" Grid.ColumnSpan="3" Height="16" Margin="1,0,0,0" VerticalAlignment="Center"
                Style="{StaticResource ā}">
                        <MenuItem Padding="0,2,4,0" Style="{StaticResource Ă}" ItemContainerStyle="{StaticResource ă}"
                      IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen), Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ItemsControl.ItemsSource>
                                <MultiBinding Converter="{StaticResource Ą}">
                                    <MultiBinding.Bindings>
                                        <Binding Path="BackStack" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ForwardStack" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </ItemsControl.ItemsSource>
                        </MenuItem>
                    </Menu>
                    <Path Grid.Column="0" SnapsToDevicePixels="false" IsHitTestVisible="false" Margin="2,0,0,0"
                Grid.ColumnSpan="3" StrokeThickness="1" HorizontalAlignment="Left" VerticalAlignment="Center"
                Data="M 22.5767,21.035 Q 27,19.37 31.424,21.035 A 12.5,12.5 0 0 0 53.5,13 12.5,12.5 0 0 0 37.765,0.926 Q 27,4.93 16.235,0.926 A 12.5,12.5 0 0 0 0.5,13 12.5,12.5 0 0 0 22.5767,21.035 Z">
                        <Shape.Fill>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#A0C2CCE7" Offset="0"/>
                                        <GradientStop Color="#60FFFFFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Shape.Fill>
                        <Shape.Stroke>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#FFB7C2E3" Offset="0.2"/>
                                        <GradientStop Color="#A0FFFFFF" Offset="0.9"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Shape.Stroke>
                        <FrameworkElement.LayoutTransform>
                            <ScaleTransform ScaleX="0.667" ScaleY="0.667"/>
                        </FrameworkElement.LayoutTransform>
                    </Path>
                    <Button Style="{StaticResource ą}" Margin="3,0,1,0" Grid.Column="0">
                        <FrameworkElement.LayoutTransform>
                            <ScaleTransform ScaleX="0.667" ScaleY="0.667"/>
                        </FrameworkElement.LayoutTransform>
                    </Button>
                    <Button Style="{StaticResource Ć}" Margin="1,0,0,0" Grid.Column="1">
                        <FrameworkElement.LayoutTransform>
                            <ScaleTransform ScaleX="0.667" ScaleY="0.667"/>
                        </FrameworkElement.LayoutTransform>
                    </Button>
                </Grid>
                <ContentPresenter x:Name="PART_FrameCP"/>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Frame.CanGoForward" Value="false"/>
                    <Condition Property="Frame.CanGoBack" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="NavMenu" Property="UIElement.IsEnabled" Value="false"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type Frame}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Frame}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}">
                        <ContentPresenter x:Name="PART_FrameCP"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Frame.NavigationUIVisibility" Value="Visible">
                <Setter Property="Control.Template" Value="{StaticResource ÿ}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Frame.JournalOwnership" Value="OwnsJournal"/>
                    <Condition Property="Frame.NavigationUIVisibility" Value="Automatic"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Template" Value="{StaticResource ÿ}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <SolidColorBrush x:Key="Š" Color="#99CCFF"/>
    <SolidColorBrush x:Key="š" Color="#F7F7F7"/>
    <SolidColorBrush x:Key="Ţ" Color="#B5B2B5"/>
    <SolidColorBrush x:Key="ţ" Color="#C6C7C6"/>
    <SolidColorBrush x:Key="Ť" Color="#C2E0FF"/>
    <SolidColorBrush x:Key="ť" Color="#3399FF"/>
    <SolidColorBrush x:Key="Ŧ" Color="#E6F0FA"/>
    <SolidColorBrush x:Key="ŧ" Color="#99CCFF"/>
    <SolidColorBrush x:Key="Ũ" Color="#3399FF"/>
    <SolidColorBrush x:Key="ũ" Color="#808080"/>
    <SolidColorBrush x:Key="Ū" Color="#FDFDFD"/>
    <SolidColorBrush x:Key="ū" Color="#E6F0FA"/>
    <LinearGradientBrush x:Key="Ŭ" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFFFFF" Offset="0"/>
            <GradientStop Color="#FFFBFF" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ŭ" StartPoint="0,0" EndPoint="688,0" MappingMode="Absolute">
        <GradientBrush.GradientStops>
            <GradientStop Color="#F4F4F4" Offset="0"/>
            <GradientStop Color="#FDFDFD" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ů" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFFFFF" Offset="0"/>
            <GradientStop Color="#FFFBFF" Offset="0.5"/>
            <GradientStop Color="#F7F7F7" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ů" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFFFFF" Offset="0"/>
            <GradientStop Color="#FFFBFF" Offset="0.5"/>
            <GradientStop Color="#F7F7F7" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Ű" Color="#C6C3C6"/>
    <LinearGradientBrush x:Key="ű" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#ECECEC" Offset="0"/>
            <GradientStop Color="#DDDDDD" Offset="0.5"/>
            <GradientStop Color="#A0A0A0" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Ų" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStop Color="#ECECEC" Offset="0"/>
            <GradientStop Color="#DDDDDD" Offset="0.5"/>
            <GradientStop Color="#A0A0A0" Offset="1"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Geometry x:Key="ų">
        M 0,2.5 L 2.5,5 L 7,0.5
    </Geometry>
    <Style x:Key="Ŵ" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="Border.CornerRadius" Value="0,0,0,0"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.Margin" Value="0,0,11,0"/>
        <Setter Property="Border.CornerRadius" Value="3,3,3,3"/>
    </Style>
    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Control.Background" Value="{StaticResource ţ}"/>
        <Setter Property="FrameworkElement.MinWidth" Value="1"/>
        <Setter Property="FrameworkElement.MinHeight" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="2,2,2,2"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Bd" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                            <Setter TargetName="Bd" Value="{StaticResource Ť}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                            <Setter TargetName="Bd" Value="{StaticResource Ť}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource Ũ}" Property="Border.BorderBrush"/>
                            <Setter TargetName="Bd" Value="{StaticResource ŧ}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter Value="{StaticResource ť}" Property="Control.BorderBrush"/>
                            <Setter Value="{StaticResource Ŧ}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{StaticResource ť}" Property="Control.BorderBrush"/>
                            <Setter Value="{StaticResource Ť}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter Value="{StaticResource ť}" Property="Control.BorderBrush"/>
                            <Setter Value="{StaticResource Ť}" Property="Control.Background"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource Ũ}" Property="Control.BorderBrush"/>
                            <Setter Value="{StaticResource ŧ}" Property="Control.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource Ũ}" Property="Control.BorderBrush"/>
                            <Setter Value="{StaticResource ŧ}" Property="Control.Background"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter Value="{StaticResource Ũ}" Property="Control.BorderBrush"/>
                            <Setter Value="{StaticResource ŧ}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
         BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}" TargetType="{x:Type CheckBox}"/>
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
         BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
         TargetType="{x:Type RadioButton}"/>
    <Style x:Key="ŵ" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="ButtonBase.ClickMode" Value="Press"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Chrome" Grid.Column="1" Width="13" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                            <Path x:Name="ArrowDownPath" Data="M 2.5,0 L 8.5,0 5.5,3 Z" Fill="Black" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Chrome" Value="{x:Null}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Chrome" Value="{StaticResource Ť}" Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Chrome" Value="{StaticResource Ũ}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Chrome" Value="{StaticResource ŧ}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="ArrowDownPath" Value="{StaticResource Ţ}" Property="Shape.Fill"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="1,0"/>
        <Setter Property="Control.Padding" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.MinHeight" Value="18"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid IsSharedSizeScope="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton"/>
                            </Grid.ColumnDefinitions>
                            <Border Name="Background" Background="{TemplateBinding Control.Background}"/>
                            <Border Name="SelectedContentBorder" Margin="2,2,1,2">
                                <ContentPresenter x:Name="ContentSite" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                  ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                  Margin="{TemplateBinding Control.Padding}" VerticalAlignment="Center"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </Border>
                            <Border Name="Border" Grid.ColumnSpan="2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"/>
                            <ToggleButton x:Name="DropDownButton" BorderBrush="White" BorderThickness="1" Grid.ColumnSpan="2"
                            Style="{StaticResource ŵ}"
                            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Control.Padding}" Margin="1,1,0,1"
                       MinHeight="18" Style="{StaticResource Þ}" Visibility="Collapsed" VerticalAlignment="Center"
                       IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                        <Popup Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                            MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Background="{TemplateBinding Control.Background}" BorderThickness="1"
                        BorderBrush="{StaticResource ũ}">
                                    <ScrollViewer Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle Name="OpaqueRect" Height="{Binding ElementName=DropDownBorder, Path=ActualHeight}"
                                   Width="{Binding ElementName=DropDownBorder, Path=ActualWidth}"
                                   Fill="{Binding ElementName=DropDownBorder, Path=Background}"/>
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </themes:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                            <Setter TargetName="Background" Value="{StaticResource š}" Property="Border.Background"/>
                            <Setter TargetName="Background" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="Border" Value="{StaticResource Ţ}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                                <Condition Property="ComboBox.IsDropDownOpen" Value="false"/>
                                <Condition Property="ComboBox.IsEditable" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SelectedContentBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Border.Background"/>
                        </MultiTrigger>
                        <Trigger Property="ComboBox.IsEditable" Value="true">
                            <Setter TargetName="DropDownButton" Value="{x:Null}" Property="Control.Background"/>
                            <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="DropDownButton" Value="{StaticResource ť}" Property="Control.BorderBrush"/>
                            <Setter TargetName="DropDownButton" Value="{StaticResource Ť}" Property="Control.Background"/>
                            <Setter TargetName="Border" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="DropDownButton" Value="{StaticResource ť}" Property="Control.BorderBrush"/>
                            <Setter TargetName="DropDownButton" Value="{StaticResource Ť}" Property="Control.Background"/>
                            <Setter TargetName="Border" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                                <Condition Property="ComboBox.IsDropDownOpen" Value="false"/>
                                <Condition Property="ComboBox.IsEditable" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
                        </MultiTrigger>
                        <Trigger Property="ComboBox.IsEditable" Value="true">
                            <Setter Property="Control.Padding" Value="2"/>
                            <Setter Property="Control.IsTabStop" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=DropDownScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top"/>
                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=DropDownScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="FrameworkElement.Margin" Value="1,0"/>
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.MinHeight" Value="18"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Border" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" MinHeight="18"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                            <Setter TargetName="Border" Value="{StaticResource š}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{StaticResource Ţ}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Border" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="Border" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.MenuStyleKey}" TargetType="{x:Type Menu}">
        <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="Control.FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="Control.FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="Control.FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type Separator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
                <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                <Setter Property="Control.Background" Value="{StaticResource ţ}"/>
                <Setter Property="FrameworkElement.Height" Value="1"/>
                <Setter Property="FrameworkElement.Margin" Value="0,1,0,0"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="1" Margin="8,0,0,0" Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                <Setter Property="Control.HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Control.VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Control.Background" Value="Transparent"/>
                <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                <Setter Property="Control.BorderThickness" Value="1"/>
                <Setter Property="FrameworkElement.Margin" Value="0,1,0,0"/>
                <Setter Property="Control.Padding" Value="8,3,8,3"/>
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid Background="Transparent" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition Width="14"/>
                                </Grid.ColumnDefinitions>
                                <Border Name="Border" Background="{TemplateBinding Control.Background}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}" Grid.ColumnSpan="4" Margin="1,0"/>
                                <ContentPresenter x:Name="Icon" Margin="0" VerticalAlignment="Center" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                <Border Name="GlyphPanel" Margin="0,1" Width="20" Height="20" Visibility="Hidden"
                        BorderBrush="{StaticResource ť}" Background="{StaticResource ū}" BorderThickness="1">
                                    <Path VerticalAlignment="Center" HorizontalAlignment="Center" FlowDirection="LeftToRight"
                        Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1.2" Data="{StaticResource ų}"/>
                                </Border>
                                <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Control.Padding}"
                                  RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                <TextBlock Grid.Column="2" Text="{TemplateBinding MenuItem.InputGestureText}" Margin="4,3,2,3"
                           HorizontalAlignment="Right"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter TargetName="Border" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                                    <Setter TargetName="Border" Value="{StaticResource Ť}" Property="Border.Background"/>
                                    <Setter TargetName="GlyphPanel" Value="{StaticResource Ũ}" Property="Border.BorderBrush"/>
                                    <Setter TargetName="GlyphPanel" Value="{StaticResource Š}" Property="Border.Background"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                        <Setter Property="Control.Padding" Value="6,2,7,2"/>
                        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Border Name="Border" Background="{TemplateBinding Control.Background}"
                                            BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="true">
                                        <DockPanel Name="Header">
                                            <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"
                                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                            <Path x:Name="GlyphPanel" Margin="4,0,6,0" Visibility="Collapsed" VerticalAlignment="Center"
                                                  FlowDirection="LeftToRight" Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1.2"
                                                  Data="{StaticResource ų}"/>
                                            <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                            <Popup x:Name="PART_Popup" Placement="Bottom" HorizontalOffset="-1" Focusable="false"
                                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                                   AllowsTransparency="true"
                                                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                                <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                                    <Border Name="SubMenuBorder" Background="{StaticResource Ū}" BorderBrush="{StaticResource ũ}"
                                                            BorderThickness="1">
                                                        <Grid>
                                                            <Rectangle Fill="{StaticResource Ū}" Margin="0,-1,0,0" VerticalAlignment="Top" HorizontalAlignment="Left"
                                                                       Height="1" Width="{Binding ElementName=Header, Path=ActualWidth}"/>
                                                            <ScrollViewer Name="SubMenuScrollViewer"
                                                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                                <Grid RenderOptions.ClearTypeHint="Enabled" IsSharedSizeScope="true">
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                                                        <ColumnDefinition Width="*"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                        <Rectangle Name="OpaqueRect" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                                                                                   Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"
                                                                                   Fill="{Binding ElementName=SubMenuBorder, Path=Background}"/>
                                                                    </Canvas>
                                                                    <Rectangle Fill="{StaticResource ů}" Margin="0,1"/>
                                                                    <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.ColumnSpan="2"
                                                                                    KeyboardNavigation.TabNavigation="Cycle" Margin="0,0,0,1"
                                                                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                                </Grid>
                                                            </ScrollViewer>
                                                        </Grid>
                                                    </Border>
                                                </themes:SystemDropShadowChrome>
                                            </Popup>
                                        </DockPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                        </Trigger>
                                        <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="MenuItem.IsChecked" Value="true">
                                            <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                            <Setter TargetName="Border" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                                            <Setter TargetName="Border" Value="{StaticResource Ť}" Property="Border.Background"/>
                                        </Trigger>
                                        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                                            <Setter TargetName="Border" Value="{StaticResource ũ}" Property="Border.BorderBrush"/>
                                            <Setter TargetName="Border" Value="{StaticResource Ŭ}" Property="Border.Background"/>
                                        </Trigger>
                                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                                        </Trigger>
                                        <Trigger Property="UIElement.IsEnabled" Value="false">
                                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                                        </Trigger>
                                        <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                                                    Property="Canvas.Top"/>
                                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                                                    Property="Canvas.Left"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="MenuItem.Role" Value="TopLevelItem">
                        <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
                        <Setter Property="Control.Padding" Value="7,1,8,2"/>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Border Name="Border" Background="{TemplateBinding Control.Background}"
                                            BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="true">
                                        <DockPanel>
                                            <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"
                                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                            <Path x:Name="GlyphPanel" Margin="4,0,6,0" Visibility="Collapsed" VerticalAlignment="Center"
                                                  FlowDirection="LeftToRight" Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1.2"
                                                  Data="{StaticResource ų}"/>
                                            <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                        </DockPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="MenuItem.IsChecked" Value="true">
                                            <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                            <Setter TargetName="Border" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                                            <Setter TargetName="Border" Value="{StaticResource Ť}" Property="Border.Background"/>
                                        </Trigger>
                                        <Trigger Property="UIElement.IsEnabled" Value="false">
                                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                        <Setter Property="DockPanel.Dock" Value="Top"/>
                        <Setter Property="Control.Padding" Value="8,3,8,3"/>
                        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Grid Background="Transparent" SnapsToDevicePixels="true">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                            <ColumnDefinition Width="14"/>
                                        </Grid.ColumnDefinitions>
                                        <Border Name="Border" Background="{TemplateBinding Control.Background}"
                                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                                BorderBrush="{TemplateBinding Control.BorderBrush}" Grid.ColumnSpan="4" Margin="1,0"/>
                                        <ContentPresenter x:Name="Icon" Margin="3" VerticalAlignment="Center" ContentSource="Icon"
                                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                        <Border Name="GlyphPanel" Margin="0,1" Width="20" Height="20" Visibility="Hidden"
                                                BorderBrush="{StaticResource ť}" Background="{StaticResource ū}" BorderThickness="1">
                                            <Path VerticalAlignment="Center" HorizontalAlignment="Center" FlowDirection="LeftToRight"
                                                  Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1.2" Data="{StaticResource ų}"/>
                                        </Border>
                                        <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Control.Padding}"
                                                          RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                        <Path Grid.Column="3" DockPanel.Dock="Right" VerticalAlignment="Center" Margin="4,0,6,0"
                                              Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource ė}"/>
                                        <Popup x:Name="PART_Popup" Placement="Right" Focusable="false"
                                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                               AllowsTransparency="true"
                                               IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                            <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                                <Border Name="SubMenuBorder" Background="{StaticResource Ū}" BorderBrush="{StaticResource ũ}"
                                                        BorderThickness="1" Grid.IsSharedSizeScope="true">
                                                    <ScrollViewer Name="SubMenuScrollViewer"
                                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                                                <ColumnDefinition Width="*"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                <Rectangle Name="OpaqueRect" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                                                                           Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"
                                                                           Fill="{Binding ElementName=SubMenuBorder, Path=Background}"/>
                                                            </Canvas>
                                                            <Rectangle Fill="{StaticResource ů}" Margin="0,1"/>
                                                            <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.ColumnSpan="2"
                                                                            KeyboardNavigation.TabNavigation="Cycle" Margin="0,0,0,1"
                                                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                        </Grid>
                                                    </ScrollViewer>
                                                </Border>
                                            </themes:SystemDropShadowChrome>
                                        </Popup>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                        </Trigger>
                                        <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="MenuItem.IsChecked" Value="true">
                                            <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                            <Setter TargetName="Border" Value="{StaticResource ť}" Property="Border.BorderBrush"/>
                                            <Setter TargetName="Border" Value="{StaticResource Ť}" Property="Border.Background"/>
                                            <Setter TargetName="GlyphPanel" Value="{StaticResource Ũ}" Property="Border.BorderBrush"/>
                                            <Setter TargetName="GlyphPanel" Value="{StaticResource Š}" Property="Border.Background"/>
                                        </Trigger>
                                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                                        </Trigger>
                                        <Trigger Property="UIElement.IsEnabled" Value="false">
                                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                                        </Trigger>
                                        <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                                                    Property="Canvas.Top"/>
                                            <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                                                    Property="Canvas.Left"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>
    <Style x:Key="Ŷ" TargetType="{x:Type Thumb}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Control.Padding}" Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle>
                            <Shape.Fill>
                                <DrawingBrush Viewbox="0,0,4,4" Viewport="0,0,4,4" TileMode="Tile" ViewportUnits="Absolute"
                                              ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <DrawingGroup.Children>
                                                <GeometryDrawing Brush="White" Geometry="M 1,1 L 1,3 3,3 3,1 Z"/>
                                                <GeometryDrawing Brush="{StaticResource Ű}" Geometry="M 0,0 L 0,2 2,2 2,0 Z"/>
                                            </DrawingGroup.Children>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Shape.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ŷ" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Control.Background" Value="{StaticResource ű}"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Bd" CornerRadius="0,3,3,0" Background="{TemplateBinding Control.Background}"
                            SnapsToDevicePixels="true">
                        <Canvas Width="6" Height="7" Margin="7,2,2,2" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                                SnapsToDevicePixels="true">
                            <Path Stroke="White" Data="M 1,1.5 L 6,1.5 "/>
                            <Path Stroke="{TemplateBinding Control.Foreground}" Data="M 0,0.5 L 5,0.5 "/>
                            <Path Fill="White" Data="M 0.5,4 L 6.5,4 3.5,7 Z"/>
                            <Path Fill="{TemplateBinding Control.Foreground}" Data="M -0.5,3 L 5.5,3 2.5,6 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource Ť}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource Ť}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource Ű}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Ÿ" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Control.Background" Value="{StaticResource Ų}"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Bd" CornerRadius="0,0,3,3" Background="{TemplateBinding Control.Background}"
                            SnapsToDevicePixels="true">
                        <Canvas Width="7" Height="6" Margin="2,7,2,2" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                                SnapsToDevicePixels="true">
                            <Path Stroke="White" Data="M 1.5,1 L 1.5,6 "/>
                            <Path Stroke="{TemplateBinding Control.Foreground}" Data="M 0.5,0 L 0.5,5 "/>
                            <Path Fill="White" Data="M 3.5,0.5 L 7,3.5 4,6.5 Z"/>
                            <Path Fill="{TemplateBinding Control.Foreground}" Data="M 3,-0.5 L 6,2.5 3,5.5 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource Ť}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Value="{StaticResource Ť}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{StaticResource Ű}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToolBar}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Control.Background" Value="{StaticResource Ů}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="true">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                                          Style="{StaticResource ŷ}" ClickMode="Press" FocusVisualStyle="{x:Null}"
                                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom" StaysOpen="false"
                                   Focusable="false"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <themes:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                    <Border x:Name="ToolBarSubMenuBorder" Background="{StaticResource Ū}" BorderBrush="{StaticResource ũ}"
                                            BorderThickness="1" RenderOptions.ClearTypeHint="Enabled">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200" Focusable="true"
                                                              KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" FocusVisualStyle="{x:Null}"/>
                                    </Border>
                                </themes:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Padding="{TemplateBinding Control.Padding}" Style="{StaticResource Ŵ}">
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb" Style="{StaticResource Ŷ}" Margin="-3,-1,0,0" Width="10" Padding="6,5,1,6"/>
                                <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center"
                                                  VerticalAlignment="Center" Margin="4,0,4,0"
                                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="HeaderedItemsControl.Header">
                            <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="themes:SystemDropShadowChrome.Color" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="1,3,1,1"/>
                            <Setter TargetName="OverflowButton" Value="{StaticResource Ÿ}" Property="FrameworkElement.Style"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="10"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Margin" Value="-1,-3,0,0"/>
                            <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="5,6,6,1"/>
                            <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                            <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
                            <Setter TargetName="MainPanelBorder" Property="FrameworkElement.Margin" Value="0,0,0,11"/>
                            <Setter Value="{StaticResource ů}" Property="Control.Background"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="ToolBarTray.Background" Value="{StaticResource ŭ}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="ToolBarTray.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
