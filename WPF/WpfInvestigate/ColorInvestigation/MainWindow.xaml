<Window x:Class="ColorInvestigation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:common="clr-namespace:ColorInvestigation.Common"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="1200">

    <Window.Resources>
        <Style x:Key="TransparentStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="Transparent">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid Margin="0 10 0 0">
        <StackPanel Orientation="Vertical" Margin="5">
            <StackPanel Orientation="Horizontal"
                        Background="{Binding Source={StaticResource HueAndSaturationProxy}, Converter={x:Static common:HueAndSaturationBrush.Instance}, ConverterParameter=70}">
                <Button Content="Refresh" Click="OnRefreshClick"/>
                <Button Width="200" Height="30" VerticalAlignment="Stretch" BorderBrush="Gray"
                        VerticalContentAlignment="Center" FontSize="14" Margin="4" Content="Test absolute hsl color">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border Background="{TemplateBinding Background}">
                                            <ContentPresenter/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" Value="{Binding Source={StaticResource HueAndSaturationProxy}, Converter={x:Static common:HueAndSaturationBrush.Instance}, ConverterParameter=35}"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{Binding Source={StaticResource HueAndSaturationProxy}, Converter={x:Static common:HueAndSaturationBrush.Instance}, ConverterParameter=10}"/>
                                    <Setter Property="Background" Value="{Binding Source={StaticResource HueAndSaturationProxy}, Converter={x:Static common:HueAndSaturationBrush.Instance}, ConverterParameter=80}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Foreground" Value="{Binding Source={StaticResource HueAndSaturationProxy}, Converter={x:Static common:HueAndSaturationBrush.Instance}, ConverterParameter=85}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>

                <Button Width="200" Height="30" VerticalAlignment="Stretch" BorderThickness="0"
                        VerticalContentAlignment="Center" FontSize="14" Margin="4" Content="Copy of previous button"
                        Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type StackPanel}}, Path=Background}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border x:Name="Border" Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}">
                                            <ContentPresenter/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=+85%}"/>
                                                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=-33%}"/>
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=85}"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=+50%}"/>
                        </Style>
                    </Button.Style>
                </Button>

                <Button BorderThickness="3" Width="300" 
                        HorizontalAlignment="Stretch" HorizontalContentAlignment="Center"
                        VerticalAlignment="Stretch" VerticalContentAlignment="Center"
                        FontSize="14" Margin="4 0" Padding="4 0"
                        Focusable="False" Content="Example of monochromatic button"
                        Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type StackPanel}}, Path=Background}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border x:Name="Border" Background="{TemplateBinding Background}"
                                                Padding="{TemplateBinding Padding}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                                BorderThickness="{TemplateBinding BorderThickness}">
                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=+50%}"/>
                                                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=+35%}"/>
                                                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=-33%}"/>
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=85}"/>
                                                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=+35%}"/>
                                                <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=+35%}"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Background, Converter={x:Static common:ColorHslBrush.InstanceWithSplit}, ConverterParameter=+55%}"/>
                        </Style>
                    </Button.Style>
                </Button>
            </StackPanel>

            <StackPanel Orientation="Horizontal">
                <TextBlock Margin="10 0 5 0">Flat buttons</TextBlock>
                <Button Style="{StaticResource FlatMonoButtonStyle}" Background="Blue" Width="140" Height="30" Margin="5 0" BorderThickness="3" Content="FlatMonoButtonStyle"/>
                <Button Style="{StaticResource FlatMonoButtonStyle}" Background="Yellow" Width="140" Height="30" Margin="5 0" BorderThickness="3" Content="FlatMonoButtonStyle"/>
                <Button Style="{StaticResource FlatMonoButtonStyle}" Width="140" Height="30" Margin="5 0" BorderThickness="3" Content="FlatMonoButtonStyle"
                        Background="{Binding Source={StaticResource HueAndSaturationProxy}, Converter={x:Static common:HueAndSaturationBrush.Instance}, ConverterParameter=70}"/>
                <Button Style="{StaticResource FlatMonoButtonStyle}" Width="200" Height="30" Margin="5 0" BorderThickness="3" Content="FlatMonoButtonStyle (disabled)"
                        Background="{Binding Source={StaticResource HueAndSaturationProxy}, Converter={x:Static common:HueAndSaturationBrush.Instance}, ConverterParameter=70}"
                        IsEnabled="False"/>
                <Button Style="{StaticResource ClearButtonStyle}" Background="Blue" Foreground="Yellow" Width="30" Height="30" BorderBrush="Red"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="5">
                <Button Click="OnTestButtonClick">Test</Button>
                <Button Click="OnGrayScaleButtonClick" Margin="5">GrayScale</Button>
                <Button Click="OnGrayScaleDiffButtonClick" Margin="5">GrayScale diff</Button>
                <Button Click="OnCalcButtonClick" Margin="5">Calc</Button>
                <Button Click="OnColorSpacesButtonClick" Margin="5">Color Spaces</Button>
                <Button Click="OnForegroundButtonClick" Margin="5">Foreground</Button>
                <Button Click="OnForegroundDiffButtonClick" Margin="5">Foreground difference</Button>
                <Button Click="OnMonoChromaticButtonClick" Margin="5">MonoChromatic</Button>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="5">
                <TextBlock Margin="10 0 5 0">HslMonoStyle</TextBlock>
                <Button Width="70" Height="30" Background="#FF00FFFF" Style="{StaticResource HslMonoStyle}">Test style</Button>
                <Button Width="100" Height="30" Background="White" Style="{StaticResource HslMonoStyle}">White button</Button>
                <Button Width="100" Height="30" Background="Black" Style="{StaticResource HslMonoStyle}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">Black button</Button>
                <Button Width="100" Height="30" Background="Black" Foreground="#FF808080" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">Black button</Button>

                <TextBlock Margin="10 0 5 0">TestColorStyle</TextBlock>
                <Button Width="70" Height="30" Background="#FF00FFFF" Style="{StaticResource TestColorStyle}">Test style</Button>
                <Button Width="100" Height="30" Background="White" Style="{StaticResource TestColorStyle}">White button</Button>
                <Button Width="100" Height="30" Background="Black" Style="{StaticResource TestColorStyle}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">Black button</Button>
            </StackPanel>

            <StackPanel Orientation="Horizontal">
                <Button  Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">AAAAA</Button>
            </StackPanel>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="140"/>
                    <ColumnDefinition Width="140"/>
                    <ColumnDefinition Width="140"/>
                    <ColumnDefinition Width="140"/>
                    <ColumnDefinition Width="140"/>
                    <ColumnDefinition Width="140"/>
                    <ColumnDefinition Width="140"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="40"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Rectangle Grid.Row="0" Grid.Column="0" x:Name="R0"/>
                <Rectangle Grid.Row="0" Grid.Column="1" x:Name="R1"/>
                <Rectangle Grid.Row="0" Grid.Column="2" x:Name="R2"/>
                <Rectangle Grid.Row="0" Grid.Column="3" x:Name="R3"/>
                <Rectangle Grid.Row="0" Grid.Column="4" x:Name="R4"/>
                <Rectangle Grid.Row="0" Grid.Column="5" x:Name="R5"/>
                <Rectangle Grid.Row="0" Grid.Column="6" x:Name="R6"/>

                <TextBox Grid.Row="1" Grid.Column="0" x:Name="C0" TextWrapping="Wrap"/>
                <TextBox Grid.Row="1" Grid.Column="1" x:Name="C1" TextWrapping="Wrap"/>
                <TextBox Grid.Row="1" Grid.Column="2" x:Name="C2" TextWrapping="Wrap"/>
                <TextBox Grid.Row="1" Grid.Column="3" x:Name="C3" TextWrapping="Wrap"/>
                <TextBox Grid.Row="1" Grid.Column="4" x:Name="C4" TextWrapping="Wrap"/>
                <TextBox Grid.Row="1" Grid.Column="5" x:Name="C5" TextWrapping="Wrap"/>
                <TextBox Grid.Row="1" Grid.Column="6" x:Name="C6" TextWrapping="Wrap"/>

                <Rectangle Grid.Row="2" Grid.Column="0" x:Name="RV0"/>
                <Rectangle Grid.Row="2" Grid.Column="1" x:Name="RV1"/>
                <Rectangle Grid.Row="2" Grid.Column="2" x:Name="RV2"/>
                <Rectangle Grid.Row="2" Grid.Column="3" x:Name="RV3"/>
                <Rectangle Grid.Row="2" Grid.Column="4" x:Name="RV4"/>
                <Rectangle Grid.Row="2" Grid.Column="5" x:Name="RV5"/>
                <Rectangle Grid.Row="2" Grid.Column="6" x:Name="RV6"/>

                <TextBox Grid.Row="3" Grid.Column="0" x:Name="CV0" TextWrapping="Wrap"/>
                <TextBox Grid.Row="3" Grid.Column="1" x:Name="CV1" TextWrapping="Wrap"/>
                <TextBox Grid.Row="3" Grid.Column="2" x:Name="CV2" TextWrapping="Wrap"/>
                <TextBox Grid.Row="3" Grid.Column="3" x:Name="CV3" TextWrapping="Wrap"/>
                <TextBox Grid.Row="3" Grid.Column="4" x:Name="CV4" TextWrapping="Wrap"/>
                <TextBox Grid.Row="3" Grid.Column="5" x:Name="CV5" TextWrapping="Wrap"/>
                <TextBox Grid.Row="3" Grid.Column="6" x:Name="CV6" TextWrapping="Wrap"/>

            </Grid>
        </StackPanel>
    </Grid>
</Window>
