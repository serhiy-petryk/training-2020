<Window x:Class="WpfInvestigate.TestViews.DropDownButtonTests"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:common="clr-namespace:WpfInvestigate.Common"
        xmlns:controls="clr-namespace:WpfInvestigate.Controls"
        mc:Ignorable="d"
        Title="ToggleButtonAndPopup" Height="900" Width="1250">

    <Window.Resources>
        <Geometry x:Key="Mwi.Container.MenuGeometry">M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z</Geometry>
        <Geometry x:Key="Mwi.Container.LeftArrowGeometry">M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z</Geometry>

        <Path x:Key="DownArrowPath" x:Shared="False" Width="10" Height="3" Fill="Black" Data="M2.5,0L8.5,0 5.5,3z" VerticalAlignment="Center"/>

        <Style TargetType="UserControl" x:Key="BB">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type UserControl}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="0" BorderThickness="1" BorderBrush="Red">
                                    <TextBox Background="Aquamarine"/>
                                </Border>
                                <ToggleButton Grid.Column="1" x:Name="Button" Width="16" Style="{StaticResource FlatButtonStyle}"
                                              Content="M7,2H17A2,2 0 0,1 19,4V20A2,2 0 0,1 17,22H7A2,2 0 0,1 5,20V4A2,2 0 0,1 7,2M7,4V8H17V4H7M7,10V12H9V10H7M11,10V12H13V10H11M15,10V12H17V10H15M7,14V16H9V14H7M11,14V16H13V14H11M15,14V16H17V14H15M7,18V20H9V18H7M11,18V20H13V18H11M15,18V20H17V18H15Z"
                                IsHitTestVisible="{Binding ElementName=Popup, Path=IsOpen, Converter={x:Static common:InverseBoolConverter.Instance}}"/>

                                <Popup x:Name="Popup"
                                       AllowsTransparency="True"
                                       Focusable="False"
                                       Placement="Bottom"
                                       PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                       PopupAnimation="Fade"
                                       IsOpen="{Binding ElementName=Button, Path=IsChecked}"
                                       StaysOpen="False">
                                    <controls:Calculator/>
                                </Popup>

                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <UserControl x:Key="AA" Background="Aqua" Width="100" Height="20"/>
    </Window.Resources>

    <Grid Margin="10 25 10 10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Slider Grid.Column="0"
                x:Name="uiScaleSlider"
                HorizontalAlignment="Center"
                VerticalAlignment="Top"
                ToolTip="Determines the UI scale factor. Double-click to revert scaling back to 100%."
                Height="100"
                Value="1" Minimum="0.5" Maximum="4"
                Orientation="Vertical"
                Ticks="1"
                IsSnapToTickEnabled="False"
                TickPlacement="BottomRight"
                AutoToolTipPlacement="BottomRight"
                AutoToolTipPrecision="2"/>

        <Grid Grid.Column="1">
            <Grid.LayoutTransform>
                <ScaleTransform CenterX="0" CenterY="0" ScaleX="{Binding ElementName=uiScaleSlider,Path=Value}" ScaleY="{Binding ElementName=uiScaleSlider,Path=Value}"/>
            </Grid.LayoutTransform>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>


            <TextBlock Grid.Row="0" Text="Dummy textbox:" HorizontalAlignment="Left"/>
            <TextBox Grid.Row="0" Margin="100 0 0 0" Width="50" Background="Yellow" HorizontalAlignment="Left"/>

            <WrapPanel Grid.Row="1">
                <ToggleButton x:Name="ToggleButton" Content="Popup" IsThreeState="False" Width="70"
                              Style="{StaticResource FlatButtonStyle}" Background="Gainsboro"
                              IsHitTestVisible="{Binding ElementName=TestPopup, Path=IsOpen, Converter={x:Static common:InverseBoolConverter.Instance}}"/>

                <Popup x:Name="TestPopup"
                       AllowsTransparency="True"
                       Focusable="False"
                       Placement="Bottom"
                       PlacementTarget="{Binding ElementName=ToggleButton}"
                       PopupAnimation="Fade"
                       IsOpen="{Binding ElementName=ToggleButton, Path=IsChecked}"
                       StaysOpen="False">
                    <controls:Calculator/>
                </Popup>

                <ContentPresenter Content="{StaticResource AA}" HorizontalAlignment="Left" Width="70"/>

                <UserControl Style="{StaticResource BB}" HorizontalAlignment="Left" Width="70" Height="30"
                             BorderThickness="2" BorderBrush="Yellow" Background="Blue" Foreground="White"/>

                <controls:NumericBox Width="70" controls:WatermarkEffect.Watermark="Enter a number" IsNullable="True" Value="23"/>
            </WrapPanel>

            <!-- ======================= -->
            <TextBlock Grid.Row="2" FontWeight="Bold" Text="Controls:" HorizontalAlignment="Center" Margin="0 20 0 0"/>

            <WrapPanel Grid.Row="3">
                <ToggleButton x:Name="PopupButton" Margin="5" Content="DropDown button with Popup" IsThreeState="False"
                          Style="{StaticResource FlatButtonStyle}" Background="Gainsboro"
                          IsHitTestVisible="{Binding ElementName=PART_Popup, Path=IsOpen, Converter={x:Static common:InverseBoolConverter.Instance}}"/>

                <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=PopupButton}"
                   PopupAnimation="Fade"
                   IsOpen="{Binding ElementName=PopupButton, Path=IsChecked}"
                   StaysOpen="False">
                    <controls:Calculator/>
                </Popup>

                <ToggleButton Margin="5" x:Name="MenuPopupButton" Content="Bad: DropDown button with MenuPopup" IsThreeState="False"
                          Style="{StaticResource FlatButtonStyle}" Background="Gainsboro"
                          IsHitTestVisible="{Binding ElementName=PART_MenuPopup, Path=IsOpen, Converter={x:Static common:InverseBoolConverter.Instance}}"/>

                <Popup x:Name="PART_MenuPopup"
                   AllowsTransparency="True"
                   Focusable="False"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=MenuPopupButton}"
                   PopupAnimation="Fade"
                   IsOpen="{Binding ElementName=MenuPopupButton, Path=IsChecked}"
                   StaysOpen="False">
                    <Menu>
                        <MenuItem Header="Копировать"/>
                        <MenuItem Header="Вставить"/>
                        <MenuItem Header="Вырезать"/>
                        <MenuItem Header="Удалить"/>
                    </Menu>
                </Popup>

                <ToggleButton Margin="5" Content="DropDown button with ContextMenu in Resources" IsThreeState="False" IsChecked="False"
                          Checked="OpenDropDownMenu"
                          Style="{StaticResource FlatButtonStyle}" Background="Gainsboro">
                    <ToggleButton.Resources>
                        <ContextMenu x:Key="cm" StaysOpen="False">
                            <MenuItem Header="Копировать"/>
                            <MenuItem Header="Вставить"/>
                            <MenuItem Header="Вырезать"/>
                            <MenuItem Header="Удалить"/>
                        </ContextMenu>
                    </ToggleButton.Resources>
                </ToggleButton>

                <ToggleButton Margin="5" Content="DropDown button with ContextMenu in tag" IsThreeState="False" IsChecked="False"
                          Checked="OpenDropDownMenu"
                          Style="{StaticResource FlatButtonStyle}" Background="Gainsboro">
                    <ToggleButton.Tag>
                        <ContextMenu StaysOpen="False">
                            <MenuItem Header="Копировать"/>
                            <MenuItem Header="Вставить"/>
                            <MenuItem Header="Вырезать"/>
                            <MenuItem Header="Удалить"/>
                        </ContextMenu>
                    </ToggleButton.Tag>
                </ToggleButton>
            </WrapPanel>

            <Grid Grid.Row="4" Background="#FF8194AA" Margin="0 10 0 0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <ToolBar x:Name="CommandBar" ToolBarTray.IsLocked="True" ToolBar.OverflowMode="Never"
                         Padding="-4" Margin="-3 -2 0 -3" Height="30" Background="#FFD6EAFF" BorderBrush="GreenYellow" Foreground="Aqua">
                    <Button Padding="0">
                        <Path Width="24" Height="24" Fill="Black" Data="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"/>
                    </Button>

                    <ToggleButton Margin="2 0" Width="26" Height="26" Padding="3" Foreground="#FF0056AE"
                                  Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                                  Focusable="False" IsThreeState="False"
                                  ToolTip="Open/Close Task panel"
                                  UseLayoutRounding="True"
                                  controls:DualPathToggleButtonEffect.GeometryOff="{StaticResource Mwi.Container.MenuGeometry}"
                                  controls:DualPathToggleButtonEffect.GeometryOn="{StaticResource Mwi.Container.LeftArrowGeometry}"/>

                    <ToggleButton Margin="2 0" Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}" VerticalAlignment="Stretch"
                                  Padding="3" Foreground="#FF0069D6" 
                                  Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                                  Focusable="False" IsThreeState="False"
                                  ToolTip="Open/Close Task panel"
                                  UseLayoutRounding="True"
                                  controls:DualPathToggleButtonEffect.GeometryOff="{StaticResource Mwi.Container.MenuGeometry}"
                                  controls:DualPathToggleButtonEffect.GeometryOn="{StaticResource Mwi.Container.LeftArrowGeometry}"/>

                    <ToggleButton Margin="2 0" Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}" VerticalAlignment="Stretch"
                                  Padding="3" Foreground="#FF007CFD" 
                                  Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                                  Focusable="False" IsThreeState="False"
                                  ToolTip="Open/Close Task panel"
                                  UseLayoutRounding="False"
                                  controls:DualPathToggleButtonEffect.GeometryOff="{StaticResource Mwi.Container.MenuGeometry}"
                                  controls:DualPathToggleButtonEffect.GeometryOn="{StaticResource Mwi.Container.LeftArrowGeometry}"/>

                    <ToggleButton x:Name="OpenSettingButton" Padding="0" IsThreeState="False" Checked="OpenDropDownMenu">
                        <StackPanel Orientation="Horizontal">
                            <Path Width="24" Height="24" Fill="Black" Data="M12,10L8,14H11V20H13V14H16M19,4H5C3.89,4 3,4.9 3,6V18A2,2 0 0,0 5,20H9V18H5V8H19V18H15V20H19A2,2 0 0,0 21,18V6A2,2 0 0,0 19,4Z"></Path>
                            <StaticResource ResourceKey="DownArrowPath"/>
                        </StackPanel>
                        <ToggleButton.Resources>
                            <ContextMenu x:Key="items" StaysOpen="False" Placement="Bottom">
                                <MenuItem Header="Copy"/>
                                <MenuItem Header="Paste"/>
                                <MenuItem Header="Delete"/>
                            </ContextMenu>
                        </ToggleButton.Resources>
                    </ToggleButton>

                    <ComboBox Width="200" Background="#FFD6EAFF" BorderBrush="#FF0069D6" Foreground="#FF0069D6" VerticalAlignment="Stretch">
                        <TextBlock>LG Nexus 5X</TextBlock>
                        <TextBlock>Huawai Nexus 6P</TextBlock>
                        <TextBlock>iPhone 6S</TextBlock>
                        <TextBlock>iPhone 6S Plus</TextBlock>
                        <TextBlock>Microsoft Lumia 950</TextBlock>
                    </ComboBox>
                </ToolBar>
            </Grid>

            <ToolBar Grid.Row="5" x:Name="CommandBar2" ToolBarTray.IsLocked="True" ToolBar.OverflowMode="Never" HorizontalAlignment="Stretch"
                     Padding="0" Margin="0 10 0 0" Height="30" Background="#FFD6EAFF">

                <ToggleButton Margin="0 -1 0 -2" Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}" VerticalAlignment="Stretch"
                              Padding="3" Foreground="#FF0069D6" 
                              Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                              Focusable="False" IsThreeState="False"
                              ToolTip="Open/Close Task panel"
                              UseLayoutRounding="True"
                              controls:DualPathToggleButtonEffect.GeometryOff="{StaticResource Mwi.Container.MenuGeometry}"
                              controls:DualPathToggleButtonEffect.GeometryOn="{StaticResource Mwi.Container.LeftArrowGeometry}"/>

                <TextBlock Text="Split button:" Margin="4 0" VerticalAlignment="Center"></TextBlock>
                <Button VerticalAlignment="Stretch" Padding="0" VerticalContentAlignment="Stretch" Margin="4 -1 4 -2" UseLayoutRounding="False">
                    <Button.Content>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Button Content="AAA" Margin="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" BorderThickness="0 0 1 0" Padding="5 0" VerticalAlignment="Stretch"/>
                            <Grid Grid.Column="1">
                                <ToggleButton Foreground="#FF0069D6" BorderThickness="1 0 0 0"
                                              ToolTip="Open/Close Task panel" Width="14" Padding="2 8" Margin="-1 0 0 0"
                                              VerticalAlignment="Stretch"
                                              Focusable="False" IsThreeState="False"
                                              controls:DualPathToggleButtonEffect.GeometryOff="M 0 2.5 L 5 7.5 L 10 2.5 Z"
                                              controls:DualPathToggleButtonEffect.GeometryOn="M9.5 2.136875L7.863125 0.5L5 3.363125L2.136875 0.5L0.5 2.136875L3.363125 5L0.5 7.863125L2.136875 9.5L5 6.636875L7.863125 9.5L9.5 7.863125L6.636875 5L9.5 2.136875Z">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}">
                                            <Style.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="False" />
                                                        <Condition Property="IsChecked" Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <MultiTrigger.Setters>
                                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                                        <Setter Property="Background" Value="Transparent"/>
                                                    </MultiTrigger.Setters>
                                                </MultiTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                        </Grid>
                    </Button.Content>
                </Button>

                <Button VerticalAlignment="Stretch" Padding="0" VerticalContentAlignment="Stretch" Margin="4 -1 4 -2" UseLayoutRounding="False">
                    <Button.Content>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Button Content="AAA" Margin="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" BorderThickness="0" Padding="5 0" VerticalAlignment="Stretch"/>
                            <Grid Grid.Column="1">
                                <ToggleButton Foreground="#FF0069D6" BorderThickness="0"
                                              ToolTip="Open/Close Task panel" Width="14" Padding="2 8"
                                              VerticalAlignment="Stretch"
                                              Focusable="False" IsThreeState="False"
                                              controls:DualPathToggleButtonEffect.GeometryOff="M 0 2.5 L 5 7.5 L 10 2.5 Z"
                                              controls:DualPathToggleButtonEffect.GeometryOn="M9.5 2.136875L7.863125 0.5L5 3.363125L2.136875 0.5L0.5 2.136875L3.363125 5L0.5 7.863125L2.136875 9.5L5 6.636875L7.863125 9.5L9.5 7.863125L6.636875 5L9.5 2.136875Z">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}">
                                            <Style.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="False" />
                                                        <Condition Property="IsChecked" Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <MultiTrigger.Setters>
                                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                                        <Setter Property="Background" Value="Transparent"/>
                                                    </MultiTrigger.Setters>
                                                </MultiTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                        </Grid>
                    </Button.Content>
                </Button>

                <TextBlock Text="Dropdown button (WiP):" Margin="4 0" VerticalAlignment="Center"/>
                <Button VerticalAlignment="Stretch" Padding="0" VerticalContentAlignment="Stretch" Margin="4 -1 4 -2" UseLayoutRounding="False">
                    <Button.Content>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Button Content="AAA" Margin="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" BorderThickness="0" Padding="5 0" VerticalAlignment="Stretch"/>
                            <Grid Grid.Column="1">
                                <ToggleButton Foreground="#FF0069D6" BorderThickness="0"
                                              ToolTip="Open/Close Task panel" Width="14" Padding="2 8"
                                              VerticalAlignment="Stretch"
                                              Focusable="False" IsThreeState="False"
                                              controls:DualPathToggleButtonEffect.GeometryOff="M 0 2.5 L 5 7.5 L 10 2.5 Z"
                                              controls:DualPathToggleButtonEffect.GeometryOn="M9.5 2.136875L7.863125 0.5L5 3.363125L2.136875 0.5L0.5 2.136875L3.363125 5L0.5 7.863125L2.136875 9.5L5 6.636875L7.863125 9.5L9.5 7.863125L6.636875 5L9.5 2.136875Z">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}">
                                            <Style.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="False" />
                                                        <Condition Property="IsChecked" Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <MultiTrigger.Setters>
                                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                                        <Setter Property="Background" Value="Transparent"/>
                                                    </MultiTrigger.Setters>
                                                </MultiTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                            </Grid>
                        </Grid>
                    </Button.Content>
                </Button>
            </ToolBar>
        </Grid>
    </Grid>
</Window>
